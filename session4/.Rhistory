library(dplyr)
library(lubridate)
setwd("C:\\Users\\Tek\\Desktop\\RWorkshop\\session4")
df<- read.csv("data/thermostat_amazon.csv")
df %>%
mutate(
verfied=ifelse(grepl(".*Verified.*", info_2), "yes", "no"),
days_to_review=gsub("Pattern: (.*) Day.*", "\\1", info_2) %>%
gsub("[^[:digit:]-]", "", .) %>%
gsub("^1", "", .) %>%
sapply(function(x){switch(x, "5-1-1"=5, "5-2"=3, "7-"=7, NA)}) %>%
as.numeric(),
star_rating=as.numeric(gsub(" out.*", "", star)),
date=gsub("on ","", date),
Year=gsub(".*, (.*)", "\\1", date),
Day=gsub(".* (.*), .*", "\\1", date),
Month=gsub("(.*) .*, .*", "\\1", date),
Month2=match(Month, month.name),
date2=paste0(Month2, Day, Year, collapse = "-")
)->df
# str(df)
View(df)
paste(df2$Month2, df2$Day, df2$Year, collapse = "-")
paste(df$Month2, df$Day, df$Year, collapse = "-")
paste(df$Month2, df$Day, df$Year, separate = "-")
paste(1, 2, 3, collapse = "-")
paste0(1, 2, 3, collapse = "-")
paste0(1, 2, 3, collapse = "/")
df %>%
mutate(
verfied=ifelse(grepl(".*Verified.*", info_2), "yes", "no"),
days_to_review=gsub("Pattern: (.*) Day.*", "\\1", info_2) %>%
gsub("[^[:digit:]-]", "", .) %>%
gsub("^1", "", .) %>%
sapply(function(x){switch(x, "5-1-1"=5, "5-2"=3, "7-"=7, NA)}) %>%
as.numeric(),
star_rating=as.numeric(gsub(" out.*", "", star)),
date=gsub("on ","", date),
Year=gsub(".*, (.*)", "\\1", date),
Day=gsub(".* (.*), .*", "\\1", date),
Month=gsub("(.*) .*, .*", "\\1", date),
Month2=match(Month, month.name),
date2=paste(c(Month2, Day, Year), collapse = "-")
# ) %>%
# rowwise() %>%
# mutate(
# date2=paste(c(Month2, Day, Year), collapse = "-")
)
df %>%
mutate(
verfied=ifelse(grepl(".*Verified.*", info_2), "yes", "no"),
days_to_review=gsub("Pattern: (.*) Day.*", "\\1", info_2) %>%
gsub("[^[:digit:]-]", "", .) %>%
gsub("^1", "", .) %>%
sapply(function(x){switch(x, "5-1-1"=5, "5-2"=3, "7-"=7, NA)}) %>%
as.numeric(),
star_rating=as.numeric(gsub(" out.*", "", star)),
date=gsub("on ","", date),
Year=gsub(".*, (.*)", "\\1", date),
Day=gsub(".* (.*), .*", "\\1", date),
Month=gsub("(.*) .*, .*", "\\1", date),
Month2=match(Month, month.name),
date2=paste(c(Month2, Day, Year), separate = "-")
# ) %>%
# rowwise() %>%
# mutate(
# date2=paste(c(Month2, Day, Year), collapse = "-")
)->df
df %>%
mutate(
verfied=ifelse(grepl(".*Verified.*", info_2), "yes", "no"),
days_to_review=gsub("Pattern: (.*) Day.*", "\\1", info_2) %>%
gsub("[^[:digit:]-]", "", .) %>%
gsub("^1", "", .) %>%
sapply(function(x){switch(x, "5-1-1"=5, "5-2"=3, "7-"=7, NA)}) %>%
as.numeric(),
star_rating=as.numeric(gsub(" out.*", "", star)),
date=gsub("on ","", date),
Year=gsub(".*, (.*)", "\\1", date),
Day=gsub(".* (.*), .*", "\\1", date),
Month=gsub("(.*) .*, .*", "\\1", date),
Month2=match(Month, month.name)
) %>%
rowwise() %>%
mutate(
date2=paste(c(Month2, Day, Year), collapse = "-")
)->df
# str(df)
View(df)
df<- read.csv("data/thermostat_amazon.csv")
df %>%
mutate(
verfied=ifelse(grepl(".*Verified.*", info_2), "yes", "no"),
days_to_review=gsub("Pattern: (.*) Day.*", "\\1", info_2) %>%
gsub("[^[:digit:]-]", "", .) %>%
gsub("^1", "", .) %>%
sapply(function(x){switch(x, "5-1-1"=5, "5-2"=3, "7-"=7, NA)}) %>%
as.numeric(),
star_rating=as.numeric(gsub(" out.*", "", star)),
date=gsub("on ","", date),
Year=gsub(".*, (.*)", "\\1", date),
Day=gsub(".* (.*), .*", "\\1", date),
Month=gsub("(.*) .*, .*", "\\1", date),
Month2=match(Month, month.name)
) %>%
rowwise() %>%
mutate(
date=paste(c(Month2, Day, Year), collapse = "-")
) %>%
dplyr::select(everything(), -Year, -Day, -Month, -Month2)->df
# str(df)
View(df)
write.csv(df, "data/example.csv", row.names = F)
knitr::opts_chunk$set(echo=F, eval=F, cache = T)
df$date2<-lubridate::mdy(df$date)
df<- read.csv("data/example.csv")
df$date<-lubridate::mdy(df$date)
cbind(df$date, as.character(df$date2))
df<- read.csv("data/example.csv")
df$date2<-lubridate::mdy(df$date)
cbind(as.character(df$date), as.character(df$date2))
rating_cat=ifelse(df$star_rating >= 4), "high",
str(df$star_rating)
rating_cat=ifelse(df$star_rating >= 4, "high",
ifelse(df$star_rating==3, "med", "low")
)
cbind(rating_cat, star_rating)
cbind(rating_cat, df$star_rating)
df %>%
mutate(
id=1:nrow(df),
date = lubridate::mdy(df$date),
date_scraped = lubridate::ymd(df$date_scraped),
df$date_diff=df$date_scraped-df$date,
df %>%
mutate(
id=1:nrow(df),
date = lubridate::mdy(date),
date_scraped = lubridate::ymd(date_scraped),
df$date_diff = date_scraped - date,
df %>%
mutate(
id=1:nrow(df),
date = lubridate::mdy(date),
date_scraped = lubridate::ymd(date_scraped),
date_diff = date_scraped - date,
rating_cat = ifelse(star_rating >= 4, "high",
ifelse(star_rating==3, "med", "low")
)
)
names(df)
df<- read.csv("data/example.csv")
df[, c(2, 5, 6)]
df[, -c("title", "info_2", "info_3")]
df[[-c("title", "info_2", "info_3")]]
df[[!c("title", "info_2", "info_3")]]
df[[c("title", "info_2", "info_3")]]
df<- read.csv("data/example.csv")
df[[c("title", "info_2", "info_3")]]
df[c("title", "info_2", "info_3")]
df[-c("title", "info_2", "info_3")]
df %>%
dplyr::select(-c(title, info_2, info_3))
df[[c("title", "info_2", "info_3")]]
# df[c("title", "info_2", "info_3")]
subset(df, select=c("title", "info_2", "info_3"))
# df[c("title", "info_2", "info_3")]
subset(df, select=-c("title", "info_2", "info_3"))
# df[c("title", "info_2", "info_3")]
subset(df, select=-c(title, info_2, info_3))
df[c(title, info_2, info_3)]
df[-c(title, info_2, info_3)]
df[, !names(df) %in% c("title", "info_2", "info_3")]
df[, !colnames(df) %in% c("title", "info_2", "info_3")]
df[c("title", "info_2", "info_3")]
rate_2_cat = function(star_rating){
if(star_rating >= 4){
return("high")
} else if(star_rating == 3){
return("med")
} else {
return("low")
}
}
sapply(df$star_rating, rate_2_cat)
# Step 2
rate_2_cat(df$star_rating)
# Step 2 alt
rate_2_cat_vect=Vectorize(rate_2_cat)
rate_2_cat_vect(df$rating_cat)
# Step 1
rate_2_cat = function(star_rating){
if(star_rating >= 4){
return("high")
} else if(star_rating == 3){
return("med")
} else {
return("low")
}
}
# Step 2 alt
rate_2_cat_vect=Vectorize(rate_2_cat)
rate_2_cat_vect(df$rating_cat)
df$rating_cat
# Step 1
rate_2_cat = function(star_rating){
if(star_rating >= 4){
return("high")
} else if(star_rating == 3){
return("med")
} else {
return("low")
}
}
df<- read.csv("data/example.csv")
df <- df[, -c(2, 5, 6)]
rate_2_cat_vect(df$rating_cat)
rate_2_cat_vect(df$star_rating)
sys.time()
# Step 2 -- Run a loop
proc.time()->ptm
df$rating_cat <- sapply(df$star_rating, rate_2_cat)
proc.time()-ptm
proc.time()->ptm
df$rating_cat <- sapply(df$star_rating, rate_2_cat)
proc.time()-ptm
proc.time()->ptm
rate_2_cat_vect(df$star_rating)
proc.time()-ptm
proc.time()->ptm
df$rating_cat <-rate_2_cat_vect(df$star_rating)
proc.time()-ptm
proc.time()->ptm
df$rating_cat <- ifelse(df$star_rating >= 4, "high",
ifelse(df$star_rating==3, "med", "low")
)
proc.time()-ptm
# Step 1
rate_2_cat = function(star_rating){
if(star_rating >= 4){
return("high")
} else if(star_rating == 3){
return("med")
} else {
return("low")
}
}
# Step 2 -- Run a loop
df$rating_cat <- sapply(df$star_rating, rate_2_cat)
# Step 2 alt -- vectorize a function
# NOTE: rate_2_cat(df$star_rating) Will not work. Not vectorized
rate_2_cat_vect=Vectorize(rate_2_cat)
df$rating_cat <-rate_2_cat_vect(df$star_rating)
# Alt
df$rating_cat <- ifelse(df$star_rating >= 4, "high",
ifelse(df$star_rating==3, "med", "low")
)
df[df$verfied=="yes", ]
subset(df, verfied=="yes")
setwd("C:\\Users\\Tek\\Desktop\\RWorkshop\\session4")
df<- read.csv("data/example.csv")
str(df)
df <- df[, -c(2, 5, 6)]
df <- df[, !colnames(df) %in% c("title", "info_2", "info_3")]
# cf) df[c("title", "info_2", "info_3")]
df < -subset(df, select=-c(title, info_2, info_3))
df <- cbind(id=1:nrow(df), df)
df <- df[, -c(2, 5, 6)]
df <- df[, !colnames(df) %in% c("title", "info_2", "info_3")]
# cf) df[c("title", "info_2", "info_3")]
df <- subset(df, select=-c(title, info_2, info_3))
!colnames(df) %in% c("title", "info_2", "info_3")
df<- read.csv("data/example.csv")
!colnames(df) %in% c("title", "info_2", "info_3")
colnames(df)
!colnames(df) %in% c("title", "info_2", "info_3")
df[c("title", "info_2", "info_3")]
df %>%
dplyr::select(-c(title, info_2, info_3)) %>%    # Use "select" include/exclude columns
dplyr::mutate(                                  # Use "mutate" to create new columns
id=1:nrow(df),
date = lubridate::mdy(date),
date_scraped = lubridate::ymd(date_scraped),
date_diff = date_scraped - date,
rating_cat = ifelse(
star_rating >= 4, "high",
ifelse(star_rating==3, "med", "low")
)
) %>%
dplyr::filter(                                  # Use filter to subset rows
verfied=="yes"
)
df %>%
dplyr::select(-c(title, info_2, info_3)) %>%    # Use "select" include/exclude columns
dplyr::mutate(                                  # Use "mutate" to create new columns
id=1:nrow(df),
date = lubridate::mdy(date),
date_scraped = lubridate::ymd(date_scraped),
date_diff = date_scraped - date,
rating_cat = ifelse(
star_rating >= 4, "high",
ifelse(star_rating==3, "med", "low")
)
) %>%
dplyr::filter(                                  # Use filter to subset rows
verfied=="yes"
) -> new_df
str(new_df)
View(new_df)
df<- read.csv("data/example.csv")
df %>%
dplyr::select(-c(title, info_2, info_3)) %>%    # Use "select" include/exclude columns
dplyr::mutate(                                  # Use "mutate" to create new columns
# dplyr::transmute(                             # cf) "transmute" drops existing variables
id=1:nrow(df),
date = lubridate::mdy(date),
date_scraped = lubridate::ymd(date_scraped),
date_diff = date_scraped - date,
rating_cat = ifelse(
star_rating >= 4, "high",
ifelse(star_rating==3, "med", "low")
)
) %>%
dplyr::filter(                                  # Use filter to subset rows
verfied=="yes"
) -> df                                         # Careful!
str(new_df)
View(new_df)
table(df$product, df$rating_cat)
proc.table(table(df$product, df$rating_cat))
prop.table(table(df$product, df$rating_cat))
options(digits = 2)
prop.table(table(df$product, df$rating_cat))
options(digits = 3)
prop.table(table(df$product, df$rating_cat))
options(digits = 1)
prop.table(table(df$product, df$rating_cat))
options("digits" = 1)
prop.table(table(df$product, df$rating_cat))
getOption("digits")
round(prop.table(table(df$product, df$rating_cat)), 2)
options("digits" = 6)
round(prop.table(table(df$product, df$rating_cat)), 3)
prop.table(table(df$product, df$rating_cat))
table(df$product, df$rating_cat)
unique(df$product)
table(df$product, factor(df$rating_cat, levels=c("low", "med", "high")))
table(df$product, df$rating_cat)
table(df$product, ordinal(df$rating_cat, levels=c("low", "med", "high")))
table(df$product, ordered(df$rating_cat, levels=c("low", "med", "high")))
tab <- table(df$product, ordered(df$rating_cat, levels=c("low", "med", "high")))
as.data.frame(tab)
tab
as.data.frame(tab)
str(tab)
as.data.frame.matrix(tab)
as.data.frame.matrix(tab) %>%
rowwise() %>%
mutate(Total=sum())
as.data.frame.matrix(tab) %>%
mutate(total=sum(c_across(low:high)))
mutate(total=rowSums(c_across(low:high)))
mutate(total=rowSums(across(low:high)))
as.data.frame.matrix(tab) %>%
mutate(total=rowSums(across(low:high)))
as.data.frame.matrix(tab) %>%
mutate(total=rowSums())
as.data.frame.matrix(tab) %>%
mutate(total=rowSums(across(low:high)))
tab
tab[1,]
sum(tab[1,])
sapply(1:nrow(tab), function(x){
sum(tab[x, ])
})
sapply(1:nrow(tab), function(x){
sum(tab[x, ])
}) %>%
cbind(tab,.)
sapply(1:nrow(tab), function(x){
sum(tab[x, ])
}) %>%
cbind(tab, total=.)
as.data.frame.matrix(tab) %>%
mutate(
total=rowSums(across(low:high)),
across(low:high, ~ .x / total)
)
as.data.frame.matrix(tab) %>%
mutate(
total=rowSums(across(low:high)),
across(low:total, ~ .x / total)
)
sapply(1:nrow(tab), function(x){
sum(tab[x, ])
}) %>%
cbind(tab, total=.)
sapply(1:nrow(tab), function(x){
sum(tab[x, ])
}) %>%
cbind(tab, total=.)->tab2
tab2
sapply(1:nrow(tab), function(x){
tab[x, ]/tab[x, "total"]
})
sapply(1:nrow(tab), function(x){
sum(tab[x, ])
}) %>%
cbind(tab, total=.)->tab
sapply(1:nrow(tab), function(x){
tab[x, ]/tab[x, "total"]
})
x=1
tab[x, ]/tab[x, "total"]
apply(tab, 1, function(x){
x/x["total"]
})
sapply(1:nrow(tab), function(x){
sum(tab[x, ])
}) %>%
cbind(tab, total=.)->tab2
apply(tab2, 1, function(x){
x/x["total"]
}) %>%
t()
sapply(1:nrow(tab), function(x){
sum(tab[x, ])
}) %>%
cbind(tab, total=.)->tab
apply(tab, 1, function(x){
x/x["total"]
}) %>%
t()
tab <- table(df$product, ordered(df$rating_cat, levels=c("low", "med", "high")))
sapply(1:nrow(tab), function(x){
sum(tab[x, ])
}) %>%
cbind(tab, total=.)->tab
apply(tab, 1, function(x){
x/x["total"]
}) %>%
t()
df<- read.csv("data/example.csv")
df %>%
dplyr::select(-c(title, info_2, info_3)) %>%    # Use "select" include/exclude columns
dplyr::mutate(                                  # Use "mutate" to create new columns
# dplyr::transmute(                             # cf) "transmute" drops existing variables
id=1:nrow(df),
date = lubridate::mdy(date),
date_scraped = lubridate::ymd(date_scraped),
date_diff = date_scraped - date,
rating_cat =
case_when(
star_rating >= 4 ~ "high",
star_rating==3 ~ "med",
TRUE ~ "low"
)
) %>%
dplyr::filter(                                  # Use filter to subset rows
verfied=="yes"
) -> df                                         # Careful!
# str(new_df)
# View(new_df)
View(new_df)
knitr::opts_chunk$set(echo=T, eval=F, cache = T)
# Example
x <- 1:5
case_when(
x %% 2==0 ~ "Even number",
TRUE  ~ "Odd number",
)
case_when(
x %% 2==0 ~ paste0(x, " is an even number"),
TRUE  ~ paste0(x, " is an odd number"),
)
