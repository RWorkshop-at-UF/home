rep(1:4, each=2)
rep(1:4, c(2,1,2,1))
rep(1:4, times=c(2,1,2,1))
c(1, T, "Stuzin", NA, Inf, NaN)
is.infinite(NaN)
is.infinite(Inf)
is.na(NaN)
class(mtcars)
class(attribute)
attributes(mtcars)
x <- cbind(a = 1:3, pi = pi) # simple matrix with dimnames
attributes(x)
mostattributes(x) <- list(mycomment = "really special", dim = 3:2,
dimnames = list(LETTERS[1:3], letters[1:5]), names = paste(1:6))
x # dim(), but not {dim}names
dim(x)
attributes(x)
attr(x)
str(1)
as.character(c(1,2,3))
as.character(5)
is.na(c(1,2,NA, 4,5))
is.na(c(1,2,NA, NaN, Inf))
anyNA(c(1,2,NA, NaN, Inf))
is.nan(c(1,2,NA, NaN, Inf))
TRUE & NA
TRUE | NA
is.logical(TRUE)
is.logical(1)
is.logical("character")
is.logical(factor(c(1,2,3)))
x=c(12,3,4,5)
class(x)
attributes(x)
typeof(x)
str(x)
x<-1:5
typeof(x)
class(x)
str(x)
is.integer(x)
attributes(x)
x<-c("Stuzin", "Hough", "Bryan", "Heavener")
typeof(x)
class(x)
str(x)
is.integer(x)
names(x)
names(x)     # NULL
names(x)<-c("STZ", "HGS", "BRY", "HVNR")  # Name each elements with abb.
x
length(x)
x<-c("Stuzin", "Hough", "Bryan", "Heavener")
typeof(x)
str(x)
is.character(x)
str(x)
names(x)                                  # NULL
names(x)<-c("STZ", "HGS", "BRY", "HVNR")  # Name each elements with abbreviation
names(x)
dim(x)
x[1]
x["STZ"]
x[TRUE]
x[c(TRUE, F, T, T)]
x[c(T, F, T, T)]
x<-1:5
x[x>3]
x > 2 & x <= 4
x<-1:5
x[x > 2 & x <= 4]  # Note: the output of  x > 2 & x <= 4 is c(F, F, T, T, F)
c(1, 3:4)
x<-1:5
x > 2 & x <= 4 # the output of  "x > 2 & x <= 4" is c(F, F, T, T, F)
which(x > 2 & x <= 4)
# Recall we have named the vector "UF_bldg"
UF_bldg[c("STZ", "HVNR")]
UF_bldg<-c("Stuzin", "Hough", "Bryan", "Heavener")
typeof(UF_bldg)
is.character(UF_bldg)
str(UF_bldg)
length(UF_bldg)     # 4
names(UF_bldg)                                  # NULL
names(UF_bldg)<-c("STZ", "HGS", "BRY", "HVNR")  # Name with abbreviation
names(UF_bldg)
# Basic Syntax
vector_name[condition] # The condition is going to be a vector as well
# setup
UF_bldg<-c("Stuzin", "Hough", "Bryan", "Heavener")  # A vector from the previous slide
# UF_bldg was declared from the previous slide
UF_bldg[c(T, F, T, T)]  # subset the values when TRUE
UF_bldg[UF_bldg %in% c("Stuzin", "Bryan")]
UF_bldg == "Hough"
UF_bldg[c("STZ", "HVNR")]
names(UF_bldg)                                  # NULL
names(UF_bldg)<-c("STZ", "HGS", "BRY", "HVNR")  # Name with abbreviation
names(UF_bldg)
UF_bldg[c("STZ", "HVNR")]
!which(x > 2 & x <= 4)
which(x > 2 & x <= 4)
!(x > 2 & x <= 4  )
!(x > 2 & x <= 4)
UF_bldg<-c(UF_bldg, "Matherly")  # Add "Matherly" to an existing vector
UF_bldg
UF_bldg[-3]
UF_bldg[-"BRY"]
UF_bldg[-c("BRY")]
append(UF_bldg, "Matherly", after=3)
append(UF_bldg, "Matherly", after=UF_bldg=="Hough")
append(UF_bldg, "Matherly", after=which(UF_bldg=="Hough"))
subset(UF_bldg, UF_bldg=="Hough")
class(`[`)
# UF_bldg was declared from the previous slide
UF_bldg<-c("Stuzin", "Hough", "Bryan", "Heavener")
UF_bldg[c(T, F, T, T)]  # subset the values when TRUE
UF_bldg %in% c(UF_bldg, "hhe")
a=c(1,2,3,4)
b=c(3,4,5,6)
! a %in% b
union(a, b)
intersect(a, b)
setdiff(a, b)
setequal(a, b)
! setdiff(a, b)
UF_bldg["Matherly"]
UF_bldg[UF_bldg=="Matherly"]
# Example
UF_bldg<-c(UF_bldg, "Matherly")   # "Matherly" was added to the UF_bldg
UF_bldg[UF_bldg=="Matherly"]
UF_bldg["Matherly"]
UF_bldg=="Matherly"
UF_bldg
UF_bldg[UF_bldg=="Matherly"]<-"Gerson"
UF_bldg
names(UF_bldg)
UF_bldg<-c("Stuzin", "Hough", "Bryan", "Heavener")
names(UF_bldg)<-c("STZ", "HGS", "BRY", "HVNR")
UF_bldg<-c(UF_bldg, "Matherly")         # "Matherly" was added to the UF_bldg
# UF_bldg=="Matherly"                   # One way to locate "Matherly"
UF_bldg[UF_bldg=="Matherly"]<-"Gerson"  # Replace "Matherly" with "Gerson"
names(UF_bldg)
# Example
UF_bldg<-c("Stuzin", "Hough", "Bryan", "Heavener")
names(UF_bldg)<-c("STZ", "HGS", "BRY", "HVNR")
UF_bldg<-c(UF_bldg, "Matherly")         # "Matherly" was added to the UF_bldg
# UF_bldg=="Matherly"                   # One way to locate "Matherly"
UF_bldg[UF_bldg=="Matherly"]<-"Gerson"  # Replace "Matherly" with "Gerson"
names(UF_bldg)[5]<-"GER"                # Assigning name to the 5th element
UF_bldg
letters
NA_vec=c("a", "b", "c", NA, NA, "F")
NA_vec[is.na(NA_vec)]<-"unknown"
NA_vec
letters[which(is.na(NA_vec))]
letters
which(is.na(NA_vec))
NA_vec=c("a", "b", "c", NA, NA, "F")
which(is.na(NA_vec))
letters[which(is.na(NA_vec))]
NA_vec[is.na(NA_vec)]<-letters[which(is.na(NA_vec))]
NA_vec
letters[is.na(NA_vec)]
NA_vec=c("a", "b", "c", NA, NA, "F")
letters[is.na(NA_vec)]
x[c(4,5,2,3,1)]
x<-c(5,3,4,1,2)  # reorder to c(1, 2, 3, 4, 5)
x[c(4,5,2,3,1)]
order(x)
x[order(x)]
sort(x)
sort(x, decreasing = T)
x1 <- c(3, 1, 4, 15, 92)
x1
rank(x1)
rank(x)
x[rank(x)]
x
x1<-c(1,5,3)
rank(x1)
order(x1)
rank(c (3, 1, 2, 5, 4))
rank(c (3, 2, 5, 4))
order(c (3, 2, 5, 4))
order(c (3, 1, 2, 5, 4))
UF_bldg
sort(UF_bldg)
order(UF_bldg)
factor(UF_bldg)
z=factor(UF_bldg)
droplevels(z, exclude="Stuzin")
z=factor(UF_bldg, levels=sort(UF_bldg))
z
numeric(z)
as.numeric(z)
z=factor(UF_bldg); as.numeric(z)
z
z=factor(UF_bldg, levels=sort(UF_bldg))
z
z=factor(UF_bldg)
z
z=factor(UF_bldg, levels=sort(UF_bldg, decreasing = T))
z
z=factor(UF_bldg)
z
as.numeric(z)
z=factor(UF_bldg, levels=sort(UF_bldg, decreasing = T))
z
as.numeric(z)
z=factor(UF_bldg)
as.numeric(z)
dplyr::arrange(UF_bldg)
UF_bldg
dplyr::arrange(UF_bldg)
3*c(1,2,3)
c(1,2,3)+2
x<-1:5; y<-6:10
1:5
x*y
x^y
sqrt(x)
x %*% y
UF_bldg
paste0(UF_bldg, " building"
)
paste0(UF_bldg, " building")
paste0(UF_bldg, " Hall")
x<-1:1000
head(x)
rep(UF_bldg, c(1,5,2,4))
rep(UF_bldg, times=c(1,5,2,4))
rep(UF_bldg, each=c(1,5,2,4))
c(ryu="Soo Yon", song="tek", wang="Xiang",  Xu="Minzhe")
class(UF_bldg)
typeof(UF_bldg)
is.character(UF_bldg)
is.vector(UF_bldg)
UF_bldg
names(UF_bldg)<-NULL
UF_bldg
rep(UF_bldg, c(3,2,4,1,2))
summary(rep(UF_bldg, c(3,2,4,1,2)))
table(rep(UF_bldg, c(3,2,4,1,2)))
# UF_bldg was declared from the previous slide
UF_bldg<-c("Stuzin", "Hough", "Bryan", "Heavener")
UF_bldg[c(T, F, T, T)]  # subset the values when TRUE
# Example
UF_bldg<-c("Stuzin", "Hough", "Bryan", "Heavener")
names(UF_bldg)<-c("STZ", "HGS", "BRY", "HVNR")
UF_bldg<-c(UF_bldg, "Matherly")         # "Matherly" was added to the UF_bldg
# UF_bldg=="Matherly"                   # One way to locate "Matherly"
UF_bldg[UF_bldg=="Matherly"]<-"Gerson"  # Replace "Matherly" with "Gerson"
names(UF_bldg)[5]<-"GER"                # Assigning name to the 5th element only
UF_bldg
UF_bldg
rep(UF_bldg, c(2,3,4,5,6))
x<-1:5;
print(mean(x); sd(x); sum(x))
print(paste("Average:", mean(x), "standard dev:", sd(x), "summation:", sum(x), sep=" "))
x<-1:5;
print(paste("Average is:", mean(x), "standard dev is:", sd(x), "summation is:", sum(x), sep="; "))
x<-1:5;
cat(paste("Average is:", mean(x), "standard dev is:", sd(x), "summation is:", sum(x), sep="\n"))
x<-1:5;
cat(paste("Average is:", mean(x), "standard dev is:", sd(x), "summation is:", sum(x), sep=" "))
cat(paste("Average is:", mean(x), "standard dev is:", sd(x), "summation is:", sum(x), sep="%c %f--"))
cat(printf(c("Average is:", mean(x), "standard dev is:", sd(x), "summation is:", sum(x)), sep="%c %f--"))
cat(print(c("Average is:", mean(x), "standard dev is:", sd(x), "summation is:", sum(x)), sep="%c %f--"))
print(paste("Average:", mean(x), "standard dev is:", sd(x), "summation:", sum(x), sep="  "))
print(paste("Average:", mean(x), "std dev:", sd(x), "sum:", sum(x), sep="  "))
print(paste("Avg:", mean(x), "std dev:", round(sd(x),2), "sum:", sum(x), sep="  "))
summary(x)
x<-c(1:10, NA, 12)
x
mean(x); sd(x); sum(x);
range(x)
range(x, na.rm=T)
skewness(x, na.rm=T)
mean(c(1,2,NA,3))
na.omit(c(1,2, NA, 3,4, NA, 5))
omit.na(NA_vec)
NA_vec=c("a", "b", "c", NA, NA, "F")
omit.na(NA_vec)
na.omit(NA_vec)
table(na.omit(NA_vec))
NA_vec[!is.na(NA_vec)]
NA_vec[!is.na(NA_vec)]
NA_vec[is.na(NA_vec)==F]
na.omit(NA_vec)
na.exclude(NA_vec)
table(c(1,1,2,3,3,4,3,3,4,5))
x<-rep(c("A", "B", "C", "F"), c(3,5,2,1))
x
table(x)
prop.table(table(x))
round(prop.table(table(x)),2)
x<-rep(c(1,2,3,4), c(3,5,2,1))
table(x)
x<-rep(c(1.2,2,3,4), c(3,5,2,1))
table(x)
x<-rep(c(1.2,3.7,2.13,pi), c(3,5,2,1))
table(x)
table(rep(c(1.2,3.7,2.13,pi), c(3,5,2,1)))
round(table(rep(c(1.2,3.7,2.13,pi), c(3,5,2,1))),2)
table(rep(c(1.2,3.7,2.13,round(pi,3)), c(3,5,2,1)))
table(rep(c(1.2,3.7,2.13,round(pi,4)), c(3,5,2,1)))
x<-1:1000
head(x); tail(x)
knitr::opts_chunk$set(echo=T, eval=F, cache = T)
# `file` could be an URL address
x="https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv"
system.time(read.csv(x));
system.time(readr::read_csv(x));
system.time(data.table::fread(x));
x<-"data/csv_example.csv"
system.time(read.csv(x));
system.time(readr::read_csv(x));
system.time(data.table::fread(x));
x<-c("a", "b")
as.numeric(x)   # Note the ""
# NA will be introduced if the string is not a number
x<-c("1", "2", "not a number", "Inf")
as.numeric(x)
typeof(Inf)
x<-c("b", "b", "a", "c", "c", "c")
as.factor(x, levels=c("a", "b", "c"))
factor(x, levels=c("a", "b", "c"))
x1<-c("b", "b", "a", "c", "c", "c")
x2<-factor(x1, levels=c("a", "b", "c"))
x
as.factor(x)
x<-rep(c("b", "a", "c"), c(2,1,3)) #
x
as.factor(x)
factor(rep(c("b", "a", "c"), c(2,1,3)))
as.character(x)
x<-factor(rep(c("b", "a", "c"), c(2,1,3)))
as.character(x)
x<-as.factor(rep(c("b", "a", "c"), c(2,1,3)))
as.character(x)
x<-as.factor(rep(c("b", "a", "c"), c(2,1,3)), levels=c("a", "b", "c"))
as.character(x)
x<-as.factor(rep(c("b", "a", "c"), c(2,1,3)), levels=c("a", "b", "c"))
x<-factor(rep(c("b", "a", "c"), c(2,1,3)), levels=c("a", "b", "c"))
as.character(x)
as.factor(x)
x<-1:5
as.factor(x)
x<-5:1
as.factor(x)
x<-factor(5:1)
as.numeric(x)
x<-factor(5:1, levels=c(3,2,1,4,5))
as.numeric(x)
x<-5:1
as.factor(x)
as.numeric(x)
x<-c(1,3,2,5,4)
as.factor(x)
as.numeric(x)
x<-factor(5:1, levels=c(3,2,1,4,5))
as.numeric(x)
as.numeric(as.factor(x))
x<-c(1,3,2,5,4)
as.factor(x)
as.numeric(as.factor(x))
x<-factor(5:1, levels=c(1:5))
as.numeric(as.factor(x))
as.numeric(x)
x<-factor(5:1, levels=c(1:5))
as.numeric(x)
x<-factor(5:1, levels=c(1:5))
x
as.numeric(x)
x<-factor(5:1, levels=c(5:1))
as.numeric(x)
x<-c(1,3,2,5,4)
as.factor(x)
x[1]
x[levels==1]
levels(x)
level(x)
x<-c(1,3,2,5,4)
x<-as.factor(x)
x
level(x)
levels(x)
levels(x)==1
x<-c(3,1,2,5,4)
x<-as.factor(x)
levels(x)==1
x<-c(3,1,2,5,4)
x<-as.factor(x)
x
levels(x)
levels(x)==1
x[levels(x)==1]
x<-c("med", "med", "med", "tall", "tall", "short")
x<-as.factor(x)
levels(x)
y
x<-factor(rep(c("b", "a", "c"), c(2,1,3)))
y<-as.character(x)
y
x<-rep(c("b", "a", "c"), c(2,1,3))  # x can be numeric as well
x
y<-as.factor(x)
y
levels(y)
x<-rep(c("beta", "alpha", "gamma"), c(2,1,3))
y<-as.factor(x)
y
levels(y)
x<-rep(c("Stuzin", "Hough", "Bryan"), c(2,1,3))
y<-as.factor(x)
y
levels(y)
z<-factor(x, levels=c("Stuzin", "Bryan", "Hough"))
z
y<-as.factor(x)
y               # Levels are automatically set in alphabetical order
z<-ordered(x, levels=c("Stuzin", "Bryan", "Hough"))
z               # May be important to set your "base"
as.character(y)
as.character(z)
as.character(y)
as.character(z)
as.character(y); as.character(z)
nrc
npc
ncr
npk
str(npk)
y
levels(z)
z[levels(z)=="Hough"]
z<-factor(x, levels=c("Stuzin", "Bryan", "Hough"))
z               # May be important to set your "base"
z[levels(z)=="Hough"]
levels(z)=="Hough"
x<-c(3,1,2,5,4)
x<-as.factor(x)
levels(x)
levels(npk)
npk
levels(npk$block)
levels(npk$N)
levels(npk$p)
levels(npk$P)
levels(npk$K)
y
x<-c(3,1,2,5,4)
y<-factor(x)
y
as.numeric(y)
x<-c(3,1,2,5,4)
y<-factor(x)
y
as.numeric(y)
npk$block
as.numeric(npk$block)
npk$block
as.numeric(npk$block)
sleep
sleep$group
npk$N
as.numeric(npk$N)
npk$N
as.numeric(npk$N)
npk$N
x<-c(0,1,1,0,1,1,0)
y<-factor(x)
y
as.numeric(y)
x<-c(0,1,1,0,1,1,0)
y<-factor(x)
y
x<-c(0,1,1,0,1,1,0)
y<-factor(x, levels=(1,0))
y
x<-c(0,1,1,0,1,1,0)
y<-factor(x, levels=(1,0))
x<-c(0,1,1,0,1,1,0)
y<-factor(x, levels=c(1,0))
y
as.numeric(y) # What happend?
as.numeric(as.character(y))
0, 1, 1, 0, 1, 0
Date("2021-09-23")
date("2021-09-23")
date()
Sys.time()
date() # current day, date, and time
Sys.time()
Sys.Date()
Sys.Date()
as.Date("2021-09-23")
str(as.Date("2021-09-23"))
as.Date("2021-09-23", format="%m/%d/%Y")
as.Date("09/23/2021", format="%m/%d/%Y")
ISOdate(year="2021", month="09", day="23")
x<-c(1,2,3,4)
names(x)
names(x)<-c("a", "b", "c", "d")
x
x[3]
x["c"]
x[-"c"]
x[-c("c")]
setdiff(names(x), "c")
x[setdiff(names(x), "c")]
x[names(x)!="c"]
x[c("b", "c", "a", "d")]
