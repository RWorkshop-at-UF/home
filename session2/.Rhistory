)
l[[2]]2
l[[2]]
l <- list(
layer1=list(
l11=list(
c("this is", "layer1", "list1"),
list(2)),
l12=list(
a=c("this is", "layer1", "list2"),
b=list(3))
)
)
l[[2]]
l <- list(
layer1=list(
l11=list(
c("this is", "layer1", "list1"),
list(2)),
l12=list(
a=c("this is", "layer1", "list2"),
b=list(3))
)
)
l
l <- list(
layer1=list(
l11=list(
c("this is", "layer1", "list1"),
list(2)),
l12=list(
a=c("this is", "layer1", "list2"),
b=list(3))
),
wrap2=list(
l21=list(
"this is wrap2"
)
)
)
l
l[[2]]
l[2]
l[[2]]
l[2]
l[[2]]
l
l[1]
l4 <- list(list(1, 2), c(3, 4))
l4
l4[1]
l4[[1]]
l4[[1]][[2]]
l4[[c(1,2)]
]
l4[[1]][[2]] == l4[[c(1,2)]]
l4 <- list(list(1, 2), c(3, 4))
l4
yellow<-list(blue=list(green=1, red=2), purple=c(3, 4))
yellow
yellow[1]
yellow[[1]]
yellow[2]
yellow[[2]]
yellow[2]
yellow[[2]]
yellow[[1]]
yellow[[1]][[1]]
yellow[[1]][1]
yellow[[1]][[1]]
yellow
yellow[1]
yellow[[1]]
yellow[[1]][1]
yellow[[1]][[1]]
yellow[2]
yellow[[2]]
yellowl4[[1]][[2]]
yellow[[1]][[2]]
yellow[[c(1,2)]]==yellowl4[[1]][[2]]
yellow[[c(1,2)]]==yellow[[1]][[2]]
yellow[[1]][[2]]
yellow[1:2]
yellow[-1]
yellow[c(1,2)]
yellow[c(1,1)]
yellow[0]
yellow
yellow[2]
Grey[1:2]
Grey<-list(Blue = list(Green=1, Yellow=2), Red=c(3, 4))
Grey[1:2]
Grey[-1]
Grey[c(1,1)]
Grey[[1]][[1]]
Grey[c(1,2)]
Grey[c(1:2)]
Grey[[c(1,2)]]
Grey[[c(1,2)]]
Grey$Blue
Grey[1]
Grey[[-1]]
Grey[[1]]
Grey$Blue
Grey[1]
Grey[[-1]]
Grey$Red
Grey[c(1,1)]
# Check the output of the following codes
Grey[0]
Grey[1]
Grey[-1]
Grey[c(1:2)]
Grey[c(1,1)]
list(int_vec=1:4, list(int_vec=5:8, char_vec=letters[1:4]))
dim(list(int_vec=1:4, list(int_vec=5:8, char_vec=letters[1:4])))
length(list(int_vec=1:4, list(int_vec=5:8, char_vec=letters[1:4])))
names(list(int_vec=1:4, list(int_vec=5:8, char_vec=letters[1:4])))
typeof(list(int_vec=1:4, list(int_vec=5:8, char_vec=letters[1:4])))
class(list(int_vec=1:4, list(int_vec=5:8, char_vec=letters[1:4])))
l
l<-list(int_vec=1:4, list(int_vec=5:8, char_vec=letters[1:4]))
length(Grey)
names(l)
str(l)
class(l)
typeof(l)
names(Grey)     # > [1] "int_vec" ""
class(l); typeof(l);  # list
str(Grey)      # Run!
Grey[[c(1,1)]]
Grey[[1]]
Grey["Blue"]
Grey[["Blue"]]
Grey[[c("Blue", "Red")]]
Grey[c("Blue", "Red")]
Grey[[c("Blue", "Green")]]
Grey[-"Blue"]
Grey[!"Blue"]
Grey[c(T,F)]
Grey[[T]]
Grey[[c(T, F)]]
Grey[[T]]
Grey[[T]][T]
Grey[[T]][[T]]
Grey[c(T,F)]
Grey[1] == Grey["Blue"] ==Grey[c(T,F)]
Grey[1] == Grey["Blue"] == Grey[c(T,F)]
Grey[1] == Grey["Blue"] == Grey[c(T,F)]
Grey[1] == Grey["Blue"]
Grey[1]
Grey["Blue"]
Grey[c(T,F)]
identical(Grey[1],  Grey["Blue"]) == Grey[c(T,F)]
identical(Grey[1],  Grey["Blue"])
identical(Grey[1],  Grey["Blue"], Grey[c(T,F)])
Grey[[c(1,2)]] == Grey[[1]][[2]]
Grey[[-1]] == Grey$Red
Grey[[-1]]
Grey$Red
Grey[[1]] == Grey$Blue
Grey[[1]]
Grey$Blue
identical(Grey["Blue"], Grey[c(T,F)])
Grey[[T]]
Grey[["Blue"]]
Grey[[T]]
Grey[[1]]
Grey[["Blue"]]
Grey$Blue
Grey[[T]][[T]]
Grey[[1]][[1]]
Grey[[T]][[T]]
Grey[[1]][[1]]
Grey[[C("Blue", "Green")]]
Grey$Blue$Green
Grey[[c("Blue", "Green")]]
Grey[[F]]
Grey[c(F, T)]
Grey[[F]]
Grey[[T]][[F]]
Grey[c(F, T)][c(F, T)]
Grey[c(F, T)]
Grey[[c(F, T)]]
Grey[c(F, T)][[c(F, T)]]
Grey[c(F, T)]
Grey[c(F, T)][[]]
Grey[c(F, T)][[T]]
Grey[[T]][[T]]
Grey[[T]]
Grey[[T]][c(F,T)]
Grey[[1]][[2]]
Grey[[1]][2]
Grey[[c("Blue", "Yellow")]]
Grey[["Yellow"]]
Grey[["Blue"]]["Yellow"]
Grey$Blue
Grey$Blue[2]
subset(Grey, Blue>1)
append(int_vec=1:4, list(int_vec=5:8, char_vec=letters[1:4]))
append(list1, list1)
list1 <- list(int_vec=1:4, list(int_vec=5:8, char_vec=letters[1:4]))
append(list1, list1)
append(list1, another_list=list(seq(0, 1, 0.1)))
list(seq(0, 1, 0.1)
list(seq(0, 1, 0.1))
list(seq(0, 1, by=0.1))
append(list1, another_list=list(seq(0, 1, by=0.1)))
append(list1, another_list)
another_list=list(seq(0, 1, by=0.1))
append(list1, another_list)
append(list1, another_list, after=2)
append(list1, another_list, after=1)
list(list1, another_list)
list1$list2=list2
list1 <- list(int_vec=1:4); list2=list(seq(0, 0.5, by=0.1))
list1$list2=list2
list1
x<-seq(0, 0.5, by=0.1)
x
x[6]
x[7]
x[7]<-8
x
x[10]<-10
x
list1
list1 <- list(int_vec=1:4); list2=list(seq(0, 0.5, by=0.1))
list1
list1 <- list(int_vec=1:4, na_vec=c(1,2, NA, 3), na_el=NA)
is.na(list1)
list1[is.na(list1)]
list1[is.na(list1)==F]
c(1,2,NA, NaN, Inf) == NA
knitr::opts_chunk$set(echo=T, eval=F, cache = T)
UF_bldg<-c("Stuzin", "Hough", "Bryan", "Heavener")
names(UF_bldg)<-c("STZ", "HGS", "BRY", "HVNR")
UF_bldg<-c(UF_bldg, "Matherly")               # Add "Matherly" at the end
UF_bldg<-c("Matherly", UF_bldg)               # at the begining
UF_bldg<-c("Stuzin", "Hough", "Bryan", "Heavener")
list1 <- list(int_vec=1:4, na_vec=c(1,2, NA, 3), na_el=NA)
list1[! is.na(list1)]
list[is.na(list1)] <- 999
list1 <- list(int_vec=1:4, na_vec=c(1,2, NA, 3), na_el=NA)
list1[! is.na(list1)]
list1[is.na(list1)]
list1[is.na(list1)] <- 999
list1[complete.cases(list1)]
complete.cases(list1)
install.packages("rlist")
rlist::list.search(list1, is.na(list1))
list1 <- list(int_vec=1:4, na_vec=c(1,2, NA, 3), na_el=NA)
rlist::list.search(list1, is.na(list1))
list1
rlist::list.search(list1, is.na(list1))
rlist::list.find(list1, is.na(list1))
rlist::list.find(list1, "int_vect")
c(1,2,NULL, NA, Inf)
vector()
is.null(vector())
list1 <- list(int_vec=1:4, na_vec=c(1,2, NA, 3), na_elmt=NA, null_elmt=NULL)
list1[! is.na(list1)]  # complete.cases will not work
list1[! is.na(list1)]
list1[! is.null(list1)]
list1 <- list(int_vec=1:4, na_vec=c(1,2, NA, 3), na_elmt=NA, null_elmt=NULL)
list1[! is.null(list1)]
is.null(list1)
Filter(is.null, list1)
length(list1)
lengths(list1)
legnths(Grey)
lengths(Grey)
?Filter
Filter(Negate(is.null), list1)
list1[lengths(list1) != 0]
list1[lengths(list1) != 0]  # Note: NULL objects have length 0
Filter(Negate(is.null), list1)
list1[[3]]<-list2
list1
list1[[5]]<-list2
list1
list1[[4]]
list1
list1 <- list(int_vec=1:4, na_vec=c(1,2, NA, 3), na_elmt=NA, null_elmt=NULL)
list1
names(list1)
list1 <- list(int_vec=1:4); list2<-list(seq(0, 0.5, by=0.1))
# Assign list2 as 2nd element of list1
list1[[2]]<-list2  # What if i is longer than the length of list1?
list1
list1 <- list(int_vec=1:4); list2<-list(seq(0, 0.5, by=0.1))
list1[2]<-list2
list1
jsonlite::fromJSON("https://api.fda.gov/drug/event.json?limit=3")
fda<-jsonlite::fromJSON("https://api.fda.gov/drug/event.json?limit=3")
str(fda)
fda_raw<-jsonlite::fromJSON("https://api.fda.gov/drug/event.json?limit=3")
str(fda_raw)   # Note that the actual data is stored in "results"
fda<-fda_raw$results
str(fda)   # Note that the actual data is stored in "results"
dim(fda)
View(fda)
fda_raw
clasS(fda)
class(fda)
class(fda_raw)
Viwe(fda)
View(fda)
View(fda[[21]][[1]])
lengths(fda)
str(fda)
rlist::search(fda, "patient")
rlist::list.search(fda, "patient")
rlist::list.select(fda, "patient")
rlist::list.find(fda, "patient")
names(fda)==patient
names(fda)=="patient"
which(names(fda)=="patient")
fda$patient
fda[which(names(fda)=="patient")]
fda[which(names(fda)=="patient"),]
fda$patient
fda[which(names(fda)=="patient"),]
str(fda)  # fda is a data.frame but nested
names(fda)
fda[[which(names(fda)=="patient")]]
fda$patient
fda[[which(names(fda)=="patient")]]
fda$patient
Find(fda, names(fda)=="patient")
Filter(fda, names(fda)=="patient")
fda$patient  # fda[[which(names(fda)=="patient")]]
names(fda$patient)
fda$patient
library(rlist)
library(jsonlite)
fda$patient
rlist::list.filter(fda, 	patientonsetage == 26)
rlist::list.filter(fda$patient, 	patientonsetage == 26)
names(fda$patient)
rlist::list.filter(fda$patient, patientonsetage == 26)
is.list(fda$patient)
people <- list.load("https://renkun-ken.github.io/rlist-tutorial/data/sample.json")
str(people)
fda_raw
str(fda_raw)
fda_raw<-jsonlite::fromJSON("data/json_example.json")
str(fda_raw)
fda_raw<-jsonlite::fromJSON("data/json_example.json")
str(fda_raw)
people <- list.load("https://renkun-ken.github.io/rlist-tutorial/data/sample.json")
write(now_json, "data/new_json.json")
people <- list.load("https://renkun-ken.github.io/rlist-tutorial/data/sample.json")
now_json<-jsonlite::toJSON(people , pretty=T)
write(now_json, "data/new_json.json")
l<-jsonlite::fromJSON("data/json_example.json")
str(l)
l<-jsonlite::fromJSON("data/json_example.json")
str(l)
?list.load
l<-list.load("data/json_example.json")
str(l)
knitr::opts_chunk$set(echo=T, eval=F, cache = T)
list1 <- list(int_vec=1:4, na_vec=c(1,2, NA, 3), na_elmt=NA, null_elmt=NULL)
unlist(list1)
l.ex <- list(a = list(1:5, LETTERS[1:5]), b = "Z", c = NA)
unlist(l.ex, recursive = FALSE)
unlist(l.ex, recursive = TRUE)
l.ex
unlist(list1, recursive = F)
l<-list(list1, list2)
list1 <- list(int_vec=1:4); list2=list(seq(0, 0.5, by=0.1))
list1 <- list(int_vec=1:4); list2<-list(seq(0, 0.5, by=0.1))
l<-list(list1, list2)
l
unlist(l)
unlist(l, recursive = T)
l
list1 <- list(int_vec=1:4); list2<-list(seq_vec=seq(0, 0.5, by=0.1))
l<-list(list1, list2)
l
unlist(l, recursive = T)
unlist(l)
unlist(l, recursive = F)
unlist(l, recursive = F)
list1 <- list(int_vec=1:2); list2<-list(seq_vec=seq(0, 0.2, by=0.1))
l<-list(list1, list2)
unlist(l)
knitr::opts_chunk$set(echo=T, eval=F, cache = T)
matrix(1:1000, ncol=5)
dmat<-matrix(1:1000, ncol=5)
summary(dmat)
summary(matrix(LETTERS, ncol=3))    # Also check tail()
mdat<-matrix(c(1,1, NA, 3, 3, 2, 4, NA, 4, 3, 3, 2), nrow=3)
mdat
summary(dmat)  # summary ov each column
summary(mdat)  # summary ov each column
det(mdat)
det(long_mat)
long_mat<-matrix(1:1000, ncol=5)
det(long_mat)
det(matrix(c(1,2,3,4), nrol=2))
det(matrix(c(1,2,3,4), ncol=2))
rbind(USA=c(39, 41, 33, 113, 1, 1)
China=c(38, 32, 18, 88, 2, 2),
rbind(USA=c(39, 41, 33, 113, 1, 1),
China=c(38, 32, 18, 88, 2, 2),
Japan=c(27, 14, 17, 58, 3, 5),
GB=c(22, 21, 22, 65, 4, 4),
ROC=c(20, 28, 23, 71, 5, 3))
olympic = rbind(
USA=c(39, 41, 33, 113, 1, 1),
China=c(38, 32, 18, 88, 2, 2),
Japan=c(27, 14, 17, 58, 3, 5),
GB=c(22, 21, 22, 65, 4, 4),
ROC=c(20, 28, 23, 71, 5, 3))
```{r eval=T}
olympic = rbind(
USA=c(39, 41, 33, 113, 1, 1),
China=c(38, 32, 18, 88, 2, 2),
Japan=c(27, 14, 17, 58, 3, 5),
GB=c(22, 21, 22, 65, 4, 4),
ROC=c(20, 28, 23, 71, 5, 3))
olympic
names(olympic)<-c("gold", "silver", "bronze", "Total", "Rank_by_gold", "Rank_by_total")
# sort and reorder
sort(olympic[, "Rank_by_total"])
olympic[, "Rank_by_total"]
olympic = rbind(
USA=c(39, 41, 33, 113, 1, 1),
China=c(38, 32, 18, 88, 2, 2),
Japan=c(27, 14, 17, 58, 3, 5),
GB=c(22, 21, 22, 65, 4, 4),
ROC=c(20, 28, 23, 71, 5, 3))
names(olympic)<-c("gold", "silver", "bronze", "Total", "Rank_by_gold", "Rank_by_total")
olympic[, "Rank_by_total"]
olympic
olympic = rbind(
USA=c(39, 41, 33, 113, 1, 1),
China=c(38, 32, 18, 88, 2, 2),
Japan=c(27, 14, 17, 58, 3, 5),
GB=c(22, 21, 22, 65, 4, 4),
ROC=c(20, 28, 23, 71, 5, 3))
colnames(olympic)<-c("gold", "silver", "bronze", "Total", "Rank_by_gold", "Rank_by_total")
olympic[, "Rank_by_total"]
# sort and reorder
olympic[sort(olympic[, "Rank_by_total"]),]
order(olympic[, "Rank_by_total"])
olympic[order(olympic[, "Rank_by_total"]),]
# sort and reorder
olympic[sort(olympic[, "Rank_by_total"]),]
olympic[order(olympic[, "Rank_by_total"]),]
olympic[, "gold"] > 30
olympic[olympic[, "gold"] > 30,]
olympic[olympic[, "gold"] > 30 & olympic[, "silver"]>40,]
olympic[olympic[, "gold"] > 30,]
olympic[, "gold"] > 30 & olympic[, "silver"]>40
olympic[olympic[, "gold"] > 30 & olympic[, "silver"]>40,]
olympic[[olympic[, "gold"] > 30 & olympic[, "silver"]>40,]]
olympic[olympic[, "gold"] > 30 & olympic[, "silver"]>40,]
olympic[, "gold"] > 30 & olympic[, "silver"]>40
olympic[, "gold"] > 30
olympic[(olympic[, "gold"] > 30 & olympic[, "silver"]>40),]
# sort/order
olympic[sort(olympic[, "Rank_by_total"]),]
olympic[order(olympic[, "Rank_by_total"]),]
olympic = rbind(
USA=c(39, 41, 33, 113, 1, 1),
China=c(38, 32, 18, 88, 2, 2),
Japan=c(27, 14, 17, 58, 3, 5),
GB=c(22, 21, 22, 65, 4, 4),
ROC=c(20, 28, 23, 71, 5, 3),
Netherlands=c(10, 12, 14, 36, 7, 9),
France=c(10, 12, 11, 33, 8, 10))
colnames(olympic)<-c("gold", "silver", "bronze",
"Total", "Rank_by_gold", "Rank_by_total")
# sort/order
olympic[sort(olympic[, "Rank_by_total"]),]
olympic[sort(olympic[, "Rank_by_total"]),]
olympic
olympic = rbind(
USA=c(39, 41, 33, 113, 1, 1),
China=c(38, 32, 18, 88, 2, 2),
Japan=c(27, 14, 17, 58, 3, 5),
GB=c(22, 21, 22, 65, 4, 4),
ROC=c(20, 28, 23, 71, 5, 3),
Netherlands=c(10, 12, 14, 36, 7, 9),
France=c(10, 12, 11, 33, 8, 10))
colnames(olympic)<-c("gold", "silver", "bronze",
"Total", "Rank_by_gold", "Rank_by_total")
olympic
sort(olympic[, "Rank_by_total"])
olympic[sort(olympic[, "Rank_by_total"]),]
olympic[order(olympic[, "Rank_by_total"]),]
order(olympic[, "Rank_by_total"])
olympic[order(olympic[, "Rank_by_total"]),]
olympic[order(olympic[, "gold"], decreasing=T),]
olympic[order(olympic[, "gold"], decreasing=F),]
order(olympic[, "gold"], olympic[, "Total"], decreasing=F)
mdat<-matrix(1:9, nrow=3)
mdat[mdat>5]<-999   # 999 could be a vector
mdat
mdat[mdat>5]<-c(1,2)   # 999 could be a vector
mdat
mdat<-matrix(1:9, nrow=3)
# replace with a value
mdat[1,]<-999
mdat
mdat<-matrix(1:9, nrow=3)
mdat[1, ]<-c(1,2)
mdat[c(1,3), ]<-c(100, 200, 300)
mdat
