gsub("\\>a", "", na)
gsub("\\<n", "", na)
na
gsub("\\\>a", "", na)
gsub("\\\\>a", "", na)
gsub("	(?<=\d)cat", "", "cat in 1cat")
gsub("(?<=\d)cat", "", "cat in 1cat")
gsub("(?<=\\d)cat", "", "cat in 1cat")
gsub("(?<=[0-9])cat", "", "cat in 1cat")
gsub("(?<=[0-9])cat", "", "cat in 1cat", perl=T)
gsub("\\<n", "", na, perl=T)
gsub("\\>a", "", na, perl=T)
gsub("\\>a", "", na)
gsub("\\<n", "", na)
gsub("\d", "", na)
na="banana nana 101"
gsub("\d", "", na)
gsub("\\d", "", na)
na
gsub("\\w", "", na)
gsub("bar(?=bar)", "", "foobarbarfoo")
gsub("bar(?=bar)", "", "foobarbarfoo", perl = T)
gsub("bar(?!bar)", "", "foobarbarfoo", perl = T)
gsub("bar(?!bar)", "", "foobarmedianbarfoo", perl = T)
gsub("bar(?!bar)", "tt", "foobarmedianbarfoo", perl = T)
gsub("bar(?=bar)", "", "foobarmedianbarfoo", perl = T)
gsub("bar(?=bar)", "", "foo1barbar2foo", perl = T)
gsub("(?<!B)A", "", na)
gsub("(?<!B)A", "", na, perl=T)
na=c("BA", "CA")
gsub("(?<!B)A", "", na, perl=T)
gsub("(?<!B)A", "\\1", na, perl=T)
gsub("(?<!B)A", "\\2", na, perl=T)
gsub("(?<!B)(A)", "\\2", na, perl=T)
gsub("(?<!B)A", "", na, perl=T)
paste("1st", "2nd", "3rd", sep = ", ")
paste("1st", "2nd", "3rd", collapse = ", ")
paste("1st", "2nd", "3rd", c("4th", "5th"), collapse = ", ")
paste("1st", "2nd", "3rd", c("4th", "5th"), sep = ", ")
paste(c("1st", "2nd", "3rd"), sep = ", ")
paste("1st", "2nd", "3rd", sep = ", ")
paste(c("1st", "2nd", "3rd"), sep = ", ")
paste(c("1st", "2nd", "3rd"), collapse = ", ")
paste("1st", "2nd", "3rd", collapse = ", ")
paste("1st", "2nd", "3rd", sep = ", ")
paste("1st", "2nd", "3rd", collapse = ", ")
paste("1st", "2nd", "3rd", sep = ", ", collapse)
paste("1st", "2nd", "3rd", sep = ", ", collapse="")
paste("1st", "2nd", "3rd")
paste0("1st", "2nd", "3rd")
gsub("(?<!B)A", "\1", na, perl=T)
gsub("(?<!B)A", "(..)", na, perl=T)
gsub("(?<!B)A", "(..)\\1", na, perl=T)
gsub("(?<!B)A", "\\1", na, perl=T)
gsub("(?<!B)A", "\\1", na, match=T)
gsub("(?<!B)A", "\\1", na)
gsub("(\\?<!B)A", "\\1", na)
gsub("(\\?\\<\\!B)A", "\\1", na)
gsub("(\\?\\<\\!B)A", "", na)
gsub("(?\\<!B)A", "", na)
gsub("(?\\\\<!B)A", "", na)
gsub("(?\<!B)A", "", na)
gsub("(?\\<!B)A", "", na)
gsub("(?<!B)A", "", na, perl=T)
gsub("(?<!B)(A)", "\\1", na, perl=T)
gsub("(?<!B)(A)", "\1", na, perl=T)
gsub("(?<!B)(A)", "\\1", na, perl=T)
gsub("(?<!B)(A)", "\\2", na, perl=T)
gsub("(?<!B)(A)", "\\3", na, perl=T)
gsub("(?<!B)(A)", "\\1", na, perl=T)
gsub("(?<!B)(A)", "\\0", na, perl=T)
gsub("(?<!B)(A)", "0", na, perl=T)
gsub("(?<!B)(A)", "HA", na, perl=T)
gsub("(?<!B)A", "HA", na, perl=T)
gsub("((?<!B))(A)", "", na, perl=T)
gsub("((?<!B))(A)", "\\1", na, perl=T)
gsub("((?<!B))(A)", "\\2", na, perl=T)
gsub("((?<!B))(A)", "\\3", na, perl=T)
gsub("(?<!B)(.*)", "", na, perl=T)
gsub("(?<!B)(.*)", "\\2", na, perl=T)
gsub("(?<!B)(.*)", "\\1", na, perl=T)
na="banana nana 101 blan"
gsub("\\>a", "", na)
gsub("\\>a", "", na, perl = T)
gsub("\\w", "", na)
gsub("\\<n", "", na)
gsub("\\<b", "", na)
gsub("a\\>", "", na)
source('~/.active-rstudio-document', echo=TRUE)
paste("a", "b", "c")
paste0("a", "b", "c")
seq(1, 100, by=10)
substr("abcdef", 2, 4)
substring("abcdef", 1:6, 1:6)
knitr::opts_chunk$set(echo=T, eval=F, cache = T)
strsplit(chr, "and")
chr <- "apples and bananas"
strsplit(chr, "and")
strsplit(chr, " and ")
strsplit(chr, ", ")
chr <- "alpha, bravo, charlie"
strsplit(chr, ", ")  # Returns a list
gregexpr("a", chr)
regexpr("a", chr)
gregexpr(" ", chr)
gregexpr(",", chr)
substr(chr, gregexpr(" ", chr), gregexpr(",", chr))
gregexpr(" ", chr)
begins <- c(1, gregexpr(" ", chr)[[1]])
ends <- c(gregexpr(",", chr)[[1]], nchar(chr))
substr(chr, begins, ends)
gregexpr(" ", chr)[[1]]
c(1, gregexpr(" ", chr)[[1]]+1)
gregexpr(",", chr)[[1]]
c(gregexpr(",", chr)[[1]]-1, nchar(chr))
begins <- c(1, gregexpr(" ", chr)[[1]]+1)
ends <- c(gregexpr(",", chr)[[1]]-1, nchar(chr))
substr(chr, begins, ends)
substring(chr, begins, ends)
gregexpr("banana", "a")
gregexpr("a", "banana")
regexpr("a", "banana")
substring("garbage important trash", start=9, stop=17)
substring("garbage important trash", first=9, last=17)
substr("garbage important trash", 9, 17)
substr("garbage important trash", 9, 17) <- "very important"
substr("garbage important trash", 9, 17) <- c("very important")
x <- c("asfef", "qwerty", "yuiop[", "b", "stuff.blah.yech")
x
substring(x, 2) <- c("..", "+++")
x
substring(x, 2)
substr("garbage important trash", 9) <- c("very important")
substring("garbage important trash", 9, 17)
substring("garbage important trash", 9, 17) <- c("very important")
x <- c("asfef", "qwerty", "yuiop[", "b", "stuff.blah.yech")
substring(x, 2)
substring(x, 2, 4) <- c("..", "+++")
x
substr("garbage important trash", start=9, stop=17)
substring("garbage important trash special", c(9, 25), c(17, 31))
chr=list("alpha, bravo, charlie, delta, echo", "foxtrot, golf, hotel")
begins <- c(1, gregexpr(" ", chr)[[1]]+1)
ends <- c(gregexpr(",", chr)[[1]]-1, nchar(chr))
substring(chr, begins, ends)
chr="alpha, bravo, charlie, delta, echo"
begins <- c(1, gregexpr(" ", chr)[[1]]+1)
ends <- c(gregexpr(",", chr)[[1]]-1, nchar(chr))
substring(chr, begins, ends)
chr="alpha, bravo, charlie, delta, echo"
chr=list("alpha, bravo, charlie, delta, echo", "foxtrot, golf, hotel")
begins <- c(1, gregexpr(" ", chr)[[1]]+1)
begins
c(1, gregexpr(" ", chr)[[1]]+1)
gregexpr(" ", chr)
chr="alpha, bravo, charlie, delta, echo"
begins <- c(1, gregexpr(" ", chr)[[1]]+1)
ends <- c(gregexpr(",", chr)[[1]]-1, nchar(chr))
substring(chr, begins, ends)
substr(rep("abcdef", 4), 1:4, 4:5)
substr("garbage important trash special", c(9, 25), c(17, 31))
substr(c("garbage important trash","garbage special trash"), c(9, 25), c(9, 15))
substring(c("garbage important trash","garbage special trash"), c(9, 25), c(9, 15))
substr(c("garbage important trash","garbage special trash"), c(9, 9), c(25, 15))
substr(c("garbage important trash","garbage special trash"), c(9, 9), c(17, 15))
substr(c("garbage important trash","garbage special trash"), 9, c(17, 15))
substring(c("garbage important trash","garbage special trash"), 9, c(17, 15))
substring("garbage important trash special", c(9, 25), c(17, 31))
substring(c("garbage important trash","garbage special trash"), 9, c(17, 15))
gsub("a", "i", "banana")
sub("a", "i", "banana")
gregexpr(" ", chr)
gregexc(" ", chr)
gregexec(" ", chr)
regexec(" ", chr)
LETTERS
toupper("change this to uppercase letters")
tolower("CHANGE THIS TO LOWERCASE LETTERS")
gsub("a", "i", "bAnana", ignore.case = T)
grep("a", "bAnana", ignore.case = T) #
knitr::opts_chunk$set(echo=T, eval=F, cache = T)
grepl("a", "bAnana", ignore.case = T)
# Example
chr <- c("bananA", "smoothie")
gsub("a", "i", chr, ignore.case = T) #
sub("a", "i", chr, ignore.case = T)
# Example
chr <- c("I learned", "How to handle characters")
grep("i", chr, ignore.case = T)
rep("a", chr, "bAnana", ignore.case = T)
grep("i", chr, ignore.case = T)
rep("i", chr, ignore.case = T)
grepl("i", chr, ignore.case = T)
rep("i", chr)
grep("i", chr, ignore.case = T, value = T)
chr <- c("I am learning", "How to handle characters")
# Return Index
grep("i", chr, ignore.case = T)
# Return value
grep("i", chr, ignore.case = T, value = T)
# Return Boolean
grepl("i", chr, ignore.case = T)
chr <- "RWorkshop2021@ufl.edu"
grep("[[:digit:]]", chr, value=T)
gsub("[[:digit:]]", chr, value=T)
gsub("[[:digit:]]", "",chr)
gsub("\\d", "",chr)
gsub("[0-9]", "",chr)
chr <- "RWorkshop2021@ufl.edu"
gsub("[[:alpha:]]", "",chr)
gsub("\\a", "",chr)
gsub("[A-Za-z]", "",chr)
gsub("\\a", "",chr, perl = T)
knitr::kable(mtcars)
read.csv("images/meta1.csv") %>%
kable_paper(bootstrap_options = "striped", full_width = F)
install.packages("kableExtra")
read.csv("images/meta1.csv") %>%
kable_paper(bootstrap_options = "striped", full_width = F)
library(dplyr)
library(kableExtra)
install.packages("gdtools")
install.packages("kableExtra")
library(kableExtra)
read.csv("images/meta1.csv") %>%
kable_paper(bootstrap_options = "striped", full_width = F)
read.csv("images/meta1.csv")
read.csv("images/meta1.csv") %>%
kable_paper(bootstrap_options = "striped", full_width = F)
read.csv("images/meta1.csv") %>%
kbl()
read.csv("images/meta1.csv") %>%
kbl() %>%
kable_paper(bootstrap_options = "striped", full_width = F)
install.packages("openxlsx")
openxlsx::read.xlsx("images/meta1.xlsx")
openxlsx::read.xlsx("images/meta1.xlsx") %>%
kbl()
# Example
gsub("(\\<.)", "\\U\\1", "here we go", perl=TRUE)
# Example
gsub("(\\<.).*", "\\U\\1", "here we go", perl=TRUE)
gsub("\\<.", "", "here we go", perl=TRUE)
gsub("\\<.", "", "here we go")
gsub("\\<w", "", "here we go")
gsub("\\<.", "1", "here we go")
gsub("\\<.{1}", "1", "here we go")
openxlsx::read.xlsx("images/meta1.xlsx") %>%
kbl()
openxlsx::read.xlsx("images/meta1.xlsx") %>%
kable("html")
openxlsx::read.xlsx("images/meta1.xlsx") %>%
kable("html")
getwd()
setwd(choose.dir())
openxlsx::read.xlsx("images/meta1.xlsx") %>%
kable("html")
# Example
gsub("[a-c]", "", c("apple", "banana"))
gsub("[^a-c]", "", "banana")
gsub(".", "", "banana")
gsub("n.", "", "banana")
gsub("a.", "", "banana")
gsub("a.", "", "banana")
gsub("\\U", "", "Banana")
gsub("\\U", "", "Banana")
gsub("\\U\\w", "", "Banana")
gsub("\\U\\w", "", "Banana", perl=T)
gsub("\\U", "", "Banana", perl=T)
gsub("\\w", "", "banana", perl=T)
gsub("\w", "", "banana", perl=T)
gsub(".", "", "...banana", perl=T)  # Need to Escape!
gsub("\\.", "", "...banana", perl=T)
openxlsx::read.xlsx("images/meta2.xlsx") %>%
kable("html") #%>%
openxlsx::read.xlsx("images/meta2.xlsx") %>%
kable("html")
# Example
is_price=c("$100", "$10.7", "$.99", "10", "7,77")
grep("\$[0-9]*\.[0-9]{0,2}?", char, value=T)
grep("\\$[0-9]*\.[0-9]{0,2}?", char, value=T)
grep("\\$[0-9]*\\.[0-9]{0,2}?", char, value=T)
grep("\\$[0-9]*\\.[0-9]{0,2}?", is_price, value=T)
grep("\\$[0-9]*(\\.[0-9]{0,2})?", is_price, value=T)
is_price=c("$100", "$10.7", "$.99", "10", "7,77", "$9.999")
grep("\\$[0-9]*(\\.[0-9]{0,2})?", is_price, value=T)
grep("\\$[0-9]*(\\.([0-9]){0,2})?", is_price, value=T)
grep("\\$[0-9]*\\.([0-9]){0,2}", is_price, value=T)
is_price=c("$100", "$10.7", "$.99", "10", "7,77", "$9.9999")
grep("\\$[0-9]*\\.([0-9]){0,2}", is_price, value=T)
grep("\\$[0-9]*\\.[0-9]{0,2}", is_price, value=T)
grep(".{0,2}", c(1,11,111,1111))
grep(".{0,2}", c(1,11,111,1111), value=# Fri Oct 29 11:44:22 2021 ------------------------------
)
grep(".{0,2}", c(1,11,111,1111), value=T)
grep(".{1,2}", c(1,11,111,1111), value=T)
grep(".{1,2}", c("1","11","111","1111"), value=T)
grep("1{1,2}", c("1","11","111","1111"), value=T)
grep("1{1, 2}", c("1","11","111","1111"), value=T)
grep("1{1,2}", c("1","11","111","1111"), value=T)
grep("1{2}", c("1","11","111","1111"), value=T)
grep("1{,2}", c("1","11","111","1111"), value=T)
grep("1{2,}", c("1","11","111","1111"), value=T)
grep("1{3,}", c("1","11","111","1111"), value=T)
grep("1{3,3}", c("1","11","111","1111"), value=T)
knitr::opts_chunk$set(echo=T, eval=F, cache = T)
is_price=c("$100", "$10.7", "$.99", "10", "7,77", "$9.999")
grep("\\$[0-9]*\\.[0-9]{0,2}", is_price, value=T)
grep("\\$[0-9]*\\.([0-9]){0,2}", is_price, value=T)
# Example
is_price=c("$100", "$10.7", "$.99", "10", "7,77", "$$9.999")
grep("\\$[0-9]*\\.([0-9]){0,2}", is_price, value=T)
grep("\\$[0-9]*(\\.([0-9]){0,2})?", is_price, value=T)
grep("\\$[0-9]*(\\.([0-9]){0,2})?", is_price, value=T)
is_price=c("$100", "$10.7", "$.99", "10", "7,77", "$$9.99")
grep("\\$[0-9]*(\\.([0-9]){0,2})?", is_price, value=T)
grep("\\${1}[0-9]*(\\.([0-9]){0,2})?", is_price, value=T)
grep("\\$[0-9]*(\\.([[:digit:]]){0,2})?", is_price, value=T)
grep("(\\$){1}[0-9]*(\\.([[:digit:]]){0,2})?", is_price, value=T)
grep("[\\$]{1}[0-9]*(\\.([[:digit:]]){0,2})?", is_price, value=T)
# Example
is_price=c("$100", "$10.7", "$.99", "10", "7,77", "$9.9999")
grep("\\$[0-9]*(\\.([[:digit:]]){0,2})?", is_price, value=T)
# Example
is_price=c("$100", "$10.7", "$.99", "10", "7,77", "$.999")
grep("\\$[0-9]*(\\.([[:digit:]]){0,2})?", is_price, value=T)
# Example
is_price=c("$100", "$10.7", "$.99", "10", "7,77", "$9.999")
grep("\\$[0-9]*(\\.([[:digit:]]){0,2})?", is_price, value=T)
# Example
is_price=c("$100", "$10.7", "$.99", "10", "7,77", "$$9.999")
grep("\\$[0-9]*(\\.([[:digit:]]){0,2})?", is_price, value=T)
grep("\\$[0-9]*(\\.\\d{0,2})?", is_price, value=T)
grep("\\$[0-9]*(\\.\\d)?", is_price, value=T)
# Example
is_price=c("$100", "$10.7", "$.99", "10", "7,77", "$9.999")
grep("\\$[0-9]*(\\.\\d)?", is_price, value=T)
grep("\\$[0-9]*(\\.\\d{0,2})?", is_price, value=T)
# Example
is_price=c("$100", "$10.7", "$.99", "10", "7,77")
grep("\\$[0-9]*(\\.\\d{0,2})?", is_price, value=T)
# Example
is_price=c("$100", "$10.7", "$.99", "10", "$7,77")
grep("\\$[0-9]*(\\.\\d{0,2})?", is_price, value=T)
grep("\\$[0-9]*[\\.[^,]]\\d{0,2})?", is_price, value=T)
grep("\\$[0-9]*\\.?\\d{0,2}?", is_price, value=T)
grep("^\\$[0-9]*\\.?\\d{0,2}?", is_price, value=T)
grep("\\$[0-9]*\\.?[0-9]{0,2}?", is_price, value=T)
grep("\\$[0-9]*\\.?[0-9]{0,2}", is_price, value=T)
grep("\\$[0-9]*\\.?[[:digit:]]{0,2}", is_price, value=T)
# Example
is_price=c("$100", "$10.7", "$.99", "10", "$7,77", "$7a77")
grep("\\$[0-9]*\\.?[[:digit:]]{0,2}", is_price, value=T)
grep("\\$[0-9]*\\.?[[:digit:]]{0,2}$", is_price, value=T)
grep("\\$[0-9]*(\\.[[:digit:]]{0,2})?$", is_price, value=T)
# Example
is_price=c("$100", "$10.7", "$.99", "10", "$7,77", "$7a77", "$9.999")
grep("\\$[0-9]*(\\.[[:digit:]]{0,2})?$", is_price, value=T)
grep("o?", chr)
# Example
chr=c("ggle", "gogle", "google", "gooogle", "goooogle")
# Example
chr=c("ggle", "gogle", "google", "gooogle", "goooogle")
grep("o?", chr, value=T)
grep("go?", chr, value=T)
grep("o?", chr, value=T)
grep("o+", chr, value=T)
grep("go?gle", chr, value=T)
grep("go*gle", chr, value=T)
grep("go+gle", chr, value=T)
grep("go{2,}gle", chr, value=T)
grep("go{,3}gle", chr, value=T)
grep("go{2,3}gle", chr, value=T)
grep("go{0,3}gle", chr, value=T)
grep("go{,3}gle", chr, value=T)
grep("go{1,3}gle", chr, value=T)
openxlsx::read.xlsx("images/meta3.xlsx") %>%
kable("html") #%>%
library(dplyr)
openxlsx::read.xlsx("images/meta3.xlsx") %>%
kable("html") #%>%
openxlsx::read.xlsx("images/meta3.xlsx") %>%
knitr::kable("html") #%>%
openxlsx::read.xlsx("images/meta3.xlsx") %>%
knitr::kable("html")
strings <- c("abcd", "cdab", "cabd", "c abd")
grep("\\bab", strings, value = TRUE)
grep("\\Bab", strings, value = TRUE)
# Example
gsub("a", "A", "anaconda")
gsub("^a", "A", "anaconda")
gsub("a$", "A", "anaconda")
gsub("a$", "A", "anacondas live in the amazon")
gsub("a$", "A", "anacondas live in the amazon")
# Example
gsub("a", "A", "An anaconda living in the amazon area")
gsub("^a", "A", "An anaconda living in the amazon area")
gsub("a$", "A", "An anaconda living in the amazon area")
gsub("\\<a", "A", "An anaconda living in the amazon area")
gsub("\a\>", "A", "An anaconda living in the amazon area")
gsub("a\\>", "A", "An anaconda living in the amazon area")
gsub("\\ba\\b", "A", "An anaconda living in the amazon area")
gsub("\\ba|a\\b", "A", "An anaconda living in the amazon area")
gsub("\\ba", "A", "An anaconda living in the amazon area")
gsub("\\Ba", "A", "An anaconda living in the amazon area")
gsub("\\ba", "A", "An anaconda living in the amazon area")
openxlsx::read.xlsx("images/meta4.xlsx") %>%
knitr::kable("html")
# Example
grep("i(s|z)e", c("summarize", "summarise"), value=T)
# Example
grep("ise", c("summarize", "summarise"), value=T)
gsub(".*(.*) but.*","\\1","I what this but not that")
gsub(".*(.*?) but.*","\\1","I what this but not that")
gsub(".* (.*?) but.*","\\1","I what this but not that")
gsub(".* (.*) but.*","\\1","I what this but not that")
gsub(".* (.*) but.*","\\1","I what \"this\" but not that")
gsub("\\s", "", "please   remove empty   whitespaces")
gsub("\\s{2,}", " ", "please   remove empty   whitespaces")
gsub("\\s{2,}", " ", "  please   remove empty   whitespaces  ")
gsub("^ | $", " ", "  please   remove empty   whitespaces  ")
gsub("^ +| +$", " ", "  please   remove empty   whitespaces  ")
gsub("^ +| +$", "", "  please   remove empty   whitespaces  ")
cat("This is line1\nThis is line2")
cat("This is line1\nThis is line2\tThis is tab")
cat("This is line1\nThis is line2\n\tThis is tab")
cat("This is line1\nThis is line2\n\tThis is tab\rThis is carrage return")
cat("This is line1\nThis is line2\n\tThis is tab\r\nThis is carriage return")
cat("This is line1\nThis is line2\n\tThis is tab")
4.99*1.2
6*0.8
# Read the data
df<-read.csv("data/thermostat_amazon.csv")
table(df$info_2)
unique(df$info_2)
df$info_2 %>%
grepl("Verified Purchase",.)
df$info_2 %>%
grepl("Verified Purchase",.) %>%
sum()
table(df$info_2)
594+69+74+1071+86+150
df$verified=ifelse(grepl("Verified Purchase",df$info_2),1,0)
sum(df$verified)
gsub("([0-9]{4})$", "\\1",df$date)
gsub(".*([0-9]{4})$", "\\1",df$date)
gsub("on (.*), .*", "\\1", df$date)
gsub("on (.*?) .*", "\\1", df$date)
gsub("on (.*) .*", "\\1", df$date)
df$month=gsub("on [[:alpha:]]+ .*", "\\1", df$date)
gsub("on [[:alpha:]]+ .*", "\\1", df$date)
df$date
gsub("on [A-Za-z]+ .*", "\\1", df$date)
gsub("on ([A-Za-z]+) .*", "\\1", df$date)
gsub("on ([[:alpha:]]+) .*", "\\1", df$date)
gsub(".* ([0-9]+), .*", "\\1", df$date)
# Example
df$info_3[2]
gsub("([[:punct:]])+", "\\1", df$info_3[2])
df$info_3[5]
df$info_3[4]
df$info_3[2]
df$info_3[8];
gsub("([[:punct:]])+", "\\1", df$info_3[8])
install.packages("tm")
install.packages("text2vec")
install.packages("spacyr")
df %>%
unnest_tokens(word, info_3)
df %>%
tidytext::unnest_tokens(word, info_3)
install.packages("tidytext")
df %>%
tidytext::unnest_tokens(word, info_3)
df %>%
tidytext::unnest_tokens(words, input=info_3)
d <- tibble(txt = prideprejudice)
library(janeaustenr)
d <- tibble(txt = prideprejudice)
d
df$info_3 %>%
as.data.frame()
df %>%
# as.data.frame() %>%
tidytext::unnest_tokens(words, as.character(info_3))
df$info_3 %>%
as.data.frame(review=.)
df$info_3 %>%
data.frame(review=.)
df$info_3 %>%
data.frame(review=., stringsAsFactors = F) %>%
tidytext::unnest_tokens(words, review)
df %>%
# data.frame(review=., stringsAsFactors = F) %>%
tidytext::unnest_tokens(word, `df$info_3`)
df %>%
# data.frame(review=., stringsAsFactors = F) %>%
tidytext::unnest_tokens(word, `info_3`)
df %>%
tibble()
# data.frame(review=., stringsAsFactors = F) %>%
tidytext::unnest_tokens(word, `info_3`)
df %>%
tibble() %>%
# data.frame(review=., stringsAsFactors = F) %>%
tidytext::unnest_tokens(word, `info_3`)
df$info_3 %>%
as.character()
# Read the data
df<-read.csv("data/thermostat_amazon.csv", stringsAsFactors = F)
gc()
str(df)
