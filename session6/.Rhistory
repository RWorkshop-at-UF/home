legend=c("obs cost of rev", "pred cost of rev"),
col=c("black", "red"),
lty=c(1,2)
)
plot(df$Revenue, df$Cost.of.Revenue,
main="This is a scatter plot",
ylab="Cost of Revenue",
xlab="Revenue")
# Add a line Layer
abline(lmodel, col="red", lty=2, lwd=3)
# Add a legend layer
legend("topright",
legend=c("obs cost of rev", "pred cost of rev"),
col=c("black", "red"),
pch=c(1),
lty=c(2)
)
plot(df$Revenue, df$Cost.of.Revenue,
main="This is a scatter plot",
ylab="Cost of Revenue",
xlab="Revenue")
# Add a line Layer
abline(lmodel, col="red", lty=2, lwd=3)
# Add a legend layer
legend("topright",
legend=c("obs cost of rev", "pred cost of rev"),
col=c("black", "red"),
pch=c(1, NULL),
lty=c(NULL, 2)
)
plot(df$Revenue, df$Cost.of.Revenue,
main="This is a scatter plot",
ylab="Cost of Revenue",
xlab="Revenue")
# Add a line Layer
abline(lmodel, col="red", lty=2, lwd=3)
# Add a legend layer
legend("topright",
legend=c("obs cost of rev", "pred cost of rev"),
col=c("black", "red"),
lty=2
)
plot(df$Revenue, df$Cost.of.Revenue,
main="This is a scatter plot",
ylab="Cost of Revenue",
xlab="Revenue")
# Add a line Layer
abline(lmodel, col="red", lty=2, lwd=3)
# Add a legend layer
legend("topright",
legend=c("obs cost of rev", "pred cost of rev"),
col=c("black", "red"),
pch=1,
lty=2
)
show_line_types()
plot(df$Revenue, df$Cost.of.Revenue,
main="This is a scatter plot",
ylab="Cost of Revenue",
xlab="Revenue")
# Add a line Layer
abline(lmodel, col="red", lty=2, lwd=3)
# Add a legend layer
legend("topright",
legend=c("obs cost of rev", "pred cost of rev"),
col=c("black", "red"),
pch=c(1,26),
lty=c(0, 2)
)
layout(matrix(c(1,1,2,3), nrow=2, byrow=T), widths=c(3,1), heights = c(1,2))
layout(matrix(c(1,1,2,3), nrow=2, byrow=T), widths=c(3,1), heights = c(1,2))
boxplot(df$Revenue)
plot(df$Revenue, df$Cost.of.Revenue)
boxplot(df$Cost.of.Revenue)
layout(matrix(c(1,1,2,3), nrow=2, byrow=T), widths=c(3,1), heights = c(1,2))
boxplot(df$Revenue, horizontal=T)
plot(df$Revenue, df$Cost.of.Revenue)
boxplot(df$Cost.of.Revenue)
par("mar")
par(mar=c(1,1,1,1))
par(mar=c(1,1,1,1))
layout(matrix(c(1,1,2,3), nrow=2, byrow=T), widths=c(3,1), heights = c(1,2))
boxplot(df$Revenue, horizontal=T)
plot(df$Revenue, df$Cost.of.Revenue)
boxplot(df$Cost.of.Revenue)
par(mfrow=c(2,2))
# plot1: boxplot of revenue
boxplot(df$Revenue)
# plot2: histogram of revenue
hist(df$Revenue, breaks = 30)
# plot3: boxplot of cost of rev.
boxplot(df$Cost.of.Revenue)
# plot4: histogram of cost of rev.
hist(df$Cost.of.Revenue, breaks=30)
par(mfrow=c(2,2))
# plot1: boxplot of revenue
boxplot(df$Revenue, horizontal = T)
# plot2: boxplot of cost of rev.
boxplot(df$Cost.of.Revenue, horizontal = T)
# plot3: histogram of revenue
hist(df$Revenue, breaks = 30, main="rev")
# plot4: histogram of cost of rev.
hist(df$Cost.of.Revenue, breaks=30, main="cost. rev")
# plot1: Horizontal boxplot of revenue
par(fig=c(0,0.8,0.55,1), new=TRUE)
boxplot(df$Revenue, horizontal=T)
# plot2: Plot of rev. vs. cost of rev.
par(fig=c(0,0.8,0,0.8), new=TRUE)
plot(df$Revenue, df$Cost.of.Revenue)
# plot3: vertical boxplot of cost of rev.
par(fig=c(0.65,1,0,0.8), new=TRUE)
boxplot(df$Cost.of.Revenue)
# fig=c(x1,x2, y1, y2) x & y range from 0 - 1
# plot1: Horizontal boxplot of revenue
par(fig=c(0,0.8,0.8,1), new=TRUE)
boxplot(df$Revenue, horizontal=T)
# plot2: Plot of rev. vs. cost of rev.
par(fig=c(0,0.8,0,0.8), new=TRUE)
plot(df$Revenue, df$Cost.of.Revenue)
# plot3: vertical boxplot of cost of rev.
par(fig=c(0.8,1,0,0.8), new=TRUE)
boxplot(df$Cost.of.Revenue)
# fig=c(x1,x2, y1, y2) x & y range from 0 - 1
plot.new()
# plot1: Horizontal boxplot of revenue
par(fig=c(0,0.8,0.8,1), new=TRUE)
boxplot(df$Revenue, horizontal=T)
# plot2: Plot of rev. vs. cost of rev.
par(fig=c(0,0.8,0,0.8), new=TRUE)
plot(df$Revenue, df$Cost.of.Revenue)
# plot3: vertical boxplot of cost of rev.
par(fig=c(0.8,1,0,0.8), new=TRUE)
boxplot(df$Cost.of.Revenue)
newvector<-mydata[,2]
names(newvector)<-mydata$X
barplot(newvector,
col = mycols,
beside = TRUE,
main = "Finance Info",
ylab = "$")
legend("topleft", legend = rownames(mydata),
fill = mycols, box.lty = 0, cex = 0.6)
mydata <- read.csv("https://raw.githubusercontent.com/songtuf/TAing/main/2014_Financial_Data.csv")
mydata<-mydata[1:5,c(1:2, 4:5)]
mycols <- c("cornsilk", "black", "red", "orange", "blue")
newvector<-mydata[,2]
names(newvector)<-mydata$X
barplot(newvector,
col = mycols,
beside = TRUE,
main = "Finance Info",
ylab = "$")
legend("topleft", legend = rownames(mydata),
fill = mycols, box.lty = 0, cex = 0.6)
ggplot(data = df) +
stat_count(mapping = aes(x = Sector))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut))
df %>%
group_by(Sector) %>%
summarize(freq=n()) %>%
ggplot() +
geom_bar(mapping = aes(x = Sector, y = freq), stat = "identity")
ggplot(data = df) +
stat_count(mapping = aes(x = Sector))+
theme(axis.text.x = element_text(
angle = 90, vjust = 0.5, hjust=1))
df %>%
count(Sector, name="count")
df %>%
count(Sector, name="freq") %>%
geom_col(aes(x=Sector, y=freq))
df %>%
count(Sector, name="freq") %>%
ggplot() +
geom_col(aes(x=Sector, y=freq))
df %>%
ggplot() +
geom_bar(aes(
x=Sector,
y=after_stat(freq / sum(freq)*100))
)
df %>%
count(Sector, name="freq") %>%
ggplot() +
geom_bar(aes(
x=Sector,
y=after_stat(freq / sum(freq)*100))
)
df %>%
count(Sector, name="freq")
mpg
ggplot(mpg) +
geom_bar(
aes(
x = class,
y = after_stat(100 * count / sum(count))
)
)
df %>%
ggplot() +
geom_bar(aes(
x=Sector,
y=after_stat( count / sum(count)*100))
)
df<-read.csv("data/finance_example.csv")
# str(df)
ggplot(data=df,
# data: which dataset to plot
mapping=aes(x=Revenue,y=Cost.of.Revenue)) +
# aes: variables for x and y
geom_point()
df<-read.csv("data/finance_example.csv")
# str(df)
ggplot(data=df,
# data: which dataset to plot
mapping=aes(x=Revenue,y=Cost.of.Revenue)) +
# aes: variables for x and y
geom_point()
ggplot(data=df,
mapping=aes(x=Revenue,y=Cost.of.Revenue)) +
geom_point()+
scale_x_continuous(
limits=c(0, 2.5*10^6)
)
ggplot(data=df,
mapping=aes(x=Revenue,y=Cost.of.Revenue)) +
geom_point()+
xlim(0, 2.5*10^6)
ggplot(data=df,
mapping=aes(x=Revenue,y=Cost.of.Revenue)) +
geom_point()+
xlim(0, 2.5*10^11)
ggplot(data=df,
mapping=aes(x=Revenue,y=Cost.of.Revenue)) +
geom_point()+
# xlim(0, 2.5*10^11)
scale_x_continuous(
limits=c(0, 2.5*10^11)
)
ggplot(data=df,
mapping=aes(x=Revenue,y=Cost.of.Revenue)) +
geom_point()+
scale_x_continuous(
limits=c(0, 2.5*10^11),
breaks=seq(0, 2.5*10^11, by=5*10^10)
)
ggplot(data=df,
mapping=aes(x=Revenue,y=Cost.of.Revenue)) +
geom_point()+
scale_x_continuous(
limits=c(0, 2.5*10^11),
breaks=seq(0, 2.5*10^11, by=5*10^10)
)
ggplot(data=df,
mapping=aes(x=Revenue,y=Cost.of.Revenue)) +
geom_point()+
scale_x_continuous(
limits=c(0, 2.5*10^11),
breaks=seq(0, 2.5*10^11, by=10^11)
)
ggplot(data=df,
mapping=aes(x=Revenue,y=Cost.of.Revenue)) +
geom_point()+
scale_x_continuous(
limits=c(0, 2.5*10^11),
breaks=seq(0, 2.5*10^11, by=10^11)
)+
ylim(0, 5*10^11)
df<-read.csv("data/finance_example.csv")
# Recall that df has many outliers
ggplot(data=df,
mapping=aes(x=Revenue,y=Cost.of.Revenue)) +
geom_point()+
scale_x_continuous(
limits=c(0, 2.5*10^11),
breaks=seq(0, 2.5*10^11, by=10^11)
)+
ylim(0, 3*10^11)
ggplot(data=df,
mapping=aes(x=Revenue,y=Cost.of.Revenue)) +
geom_point()+
scale_x_continuous(
limits=c(0, 2.5*10^11),
breaks=seq(0, 2.5*10^11, by=10^11)
)+
ylim(0, 2*10^11)
ggplot(data=df,
mapping=aes(x=Revenue,y=Cost.of.Revenue,
color=Sector)) +
geom_point()+
scale_x_continuous(
trans="log10"
)+
ylim(0, 2*10^11)
ggplot(data=df,
mapping=aes(x=Revenue,y=Cost.of.Revenue,
color=Sector)) +
geom_point()+
scale_x_continuous(
trans="log10"
)+
ylim(0, 2*10^11)+
scale_colour_brewer(type = 'set1')
display.brewer.all()
RColorBrewer::display.brewer.all()
ggplot(data=df,
mapping=aes(x=Revenue,y=Cost.of.Revenue,
color=Sector)) +
geom_point()+
scale_x_continuous(
trans="log10"
)+
ylim(0, 2*10^11)+
scale_colour_brewer(type = 'Set3')
ggplot(data=df,
mapping=aes(x=Revenue,y=Cost.of.Revenue,
color=Sector)) +
geom_point()+
scale_x_continuous(
trans="log10"
)+
ylim(0, 2*10^11)+
scale_colour_brewer(type = 'Set3')
ggplot(data=df,
mapping=aes(x=Revenue,y=Cost.of.Revenue,
color=Sector)) +
geom_point()+
scale_x_continuous(
trans="log10"
)+
ylim(0, 2*10^11)+
scale_colour_brewer(type = 'qual')
ggplot(data=df,
mapping=aes(x=Revenue,y=Cost.of.Revenue,
color=Sector)) +
geom_point()+
scale_x_continuous(
trans="log10"
)+
ylim(0, 2*10^11)+
scale_colour_brewer(type = 'qual')+
scale_color_manual(limits=force)
ggplot(data=df,
mapping=aes(x=Revenue,y=Cost.of.Revenue,
color=Sector)) +
geom_point()+
scale_x_continuous(
trans="log10"
)+
ylim(0, 2*10^11)+
scale_colour_brewer(type = 'qual')+
scale_fill_manual(limits=force)
ggplot(data=df,
mapping=aes(x=Revenue,y=Cost.of.Revenue,
color=Sector)) +
geom_point()+
scale_x_continuous(
trans="log10"
)+
ylim(0, 2*10^11)+
scale_colour_brewer(type = 'qual')+
scale_color_manual(limits=levels(Sector))
ggplot(data=df,
mapping=aes(x=Revenue,y=Cost.of.Revenue,
color=Sector)) +
geom_point()+
scale_x_continuous(
trans="log10"
)+
ylim(0, 2*10^11)+
scale_colour_brewer(type = 'qual')+
scale_color_manual(limits=levels(df$Sector))
ggplot(data=df,
mapping=aes(x=Revenue,y=Cost.of.Revenue,
color=Sector)) +
geom_point()+
scale_x_continuous(
trans="log10"
)+
ylim(0, 2*10^11)+
scale_colour_brewer(type = 'qual')+
scale_color_manual(drop=T)
ggplot(data=df,
mapping=aes(x=Revenue,y=Cost.of.Revenue,
color=Sector)) +
geom_point()+
scale_x_continuous(
trans="log10"
)+
ylim(0, 2*10^11)+
scale_colour_brewer(type = 'qual')+
scale_color_manual(values=fcol_Sector)
ggplot(data=df,
mapping=aes(x=Revenue,y=Cost.of.Revenue,
color=Sector)) +
geom_point()+
scale_x_continuous(
trans="log10"
)+
ylim(0, 2*10^11)+
scale_colour_brewer(type = 'qual')+
scale_color_manual(values=Sector)
ggplot(data=df,
mapping=aes(x=Revenue,y=Cost.of.Revenue,
color=Sector)) +
geom_point()+
scale_x_continuous(
trans="log10"
)+
ylim(0, 2*10^11)
ggplot(data=df,
mapping=aes(x=Revenue,y=Cost.of.Revenue,
color=Sector)) +
geom_point()+
scale_x_continuous(
trans="log10"
)+
ylim(0, 2*10^11)+
scale_colour_brewer(type = 'qual', drop=T)
read.csv("data/finance_example.csv") %>%
filter(
Revenue < quantile(Revenue, 0.9,
na.rm = T)) -> df
df
read.csv("data/finance_example.csv") %>%
filter(Revenue < quantile(Revenue, 0.9,
na.rm = T)) %>%
mutate(partition = rep(c(1, 1, 0, -1), len=nrow(.)))
read.csv("data/finance_example.csv") %>%
filter(Revenue < quantile(Revenue, 0.9,
na.rm = T)) %>%
mutate(partition = rep(c(1, 1, 0, -1), len=nrow(.)))-> df
View(df)
names(df)
df$partition
df %>%
ggplot()+
geom_point(aes(x=Revenue, y=Cost.of.Revenue))+
facet_wrap(~ Sector)
df %>%
ggplot()+
geom_point(aes(x=Revenue, y=Cost.of.Revenue))+
# facet_wrap(~ Sector)                     # Facet is often the best way to avoid overplotting
facet_wrap(~ Sector, scales='free')
df %>%
ggplot()+
geom_point(aes(x=Revenue, y=Cost.of.Revenue))+
# facet_wrap(~ Sector)                     # Facet is often the best way to avoid overplotting
# facet_wrap(~ Sector, scales='free')      # free_y or free_x
facet_grid(partition ~ Sector)
df %>%
ggplot()+
geom_bar(aes(y=Sector))+
facet_grid(class ~ ., scale="free_y" , space="free_y")
df %>%
ggplot()+
geom_bar(aes(y=Sector))+
facet_grid(Sector ~ ., scale="free_y" , space="free_y")
df %>%
ggplot()+
geom_bar(aes(y=Sector))+
facet_grid(Sector ~ .)
df %>%
ggplot()+
geom_bar(aes(x=Sector))
df %>%
ggplot()+
geom_bar(aes(x=Sector))+
coord_polar()
df %>%
ggplot()+
geom_bar(aes(x=Sector))+
coord_polar()\
df %>%
ggplot()+
geom_bar(aes(x=Sector))+
coord_polar()
df %>%
ggplot()+
geom_bar(aes(x=Sector))+
coord_polar()
# scale_y_continuous(limits=c(0, 300))
df %>%
ggplot()+
geom_bar(aes(x=Sector))+
coord_polar()+
scale_y_continuous(limits=c(0, 300))
df %>%
ggplot()+
geom_bar(aes(x=Sector))+
coord_polar()+
# scale_y_continuous(limits=c(0, 300))
coord_cartesian(ylim=c(0, 300))
df %>%
ggplot()+
geom_bar(aes(x=Sector))+
coord_flip()
df %>%
ggplot()+
geom_bar(aes(x=Sector))+
# scale_y_continuous(limits=c(0, 300))
coord_cartesian(ylim=c(0, 300))
df %>%
ggplot()+
geom_bar(aes(x=Sector))+
facet_wrap(~ partition)
df %>%
ggplot()+
geom_bar(aes(x=Sector))+
facet_wrap(~ partition)+
theme_minimal()
