good_f()
err_f()
good_f<-function(){
print("good")
}
err_f<-function(){
stop("this is an error")
}
warn_f<-function(){
warning("this is a warning")
}
msg_f<-function(){
message("this is a message")
}
good_f()
err_f()
warn_f()
msg_f()
library(dplyr)
good_f() %>%
g()
err_f() %>%
g()
warn_f() %>%
g()
msg_f() %>%
g()
options(error = expression(NULL))
err_f<-function(){
stop("this is an error")
}
# ignores error messages
options(error = -1)
# ignores error messages
options(error = 0)
getOption)
getOption())
getOption()
g<-function(x){tryCatch(
{
x
},
error=function(e){
print("error-handling-code")
},
warning=function(w){
print("warning-handling-code")
},
message=function(m){
print("message-handling-code")
},
finally = {
print("done")
}
)
}
good_f<-function(){
print("good")
}
err_f<-function(){
stop("this is an error")
}
warn_f<-function(){
warning("this is a warning")
}
msg_f<-function(){
message("this is a message")
}
good_f() %>%
g()
err_f() %>%
g()
warn_f() %>%
g()
msg_f() %>%
g()
g<-function(x){tryCatch(
{
x
},
error=function(e){
print("error-handling-code")
},
warning=function(w){
print("warning-handling-code")
},
message=function(m){
print("message-handling-code")
},
finally = {
message("final message")
}
)
}
good_f() %>%
g()
tc <- function(x){
tryCatch({x},
error=function(e){print("error-handling-code_placeholder")},
warning=function(w){print("warning-handling-code_placeholder")},
message=function(m){print("message-handling-code_placeholder")},
finally = {message("final message placeholder")}
)}
good_f<-function(){print("good")}
err_f<-function(){stop("this is an error")}
warn_f<-function(){warning("this is a warning")}
msg_f<-function(){message("this is a message")}
tc(good_f()); tc(err_f()); tc(warn_f()); tc(msg_f())
tc <- function(x){
tryCatch({x},
error=function(e){print("error-handling-code")},
warning=function(w){print("warning-handling-code")},
message=function(m){print("message-handling-code")},
finally = {message("final message")}
)}
good_f<-function(){print("good")}
err_f<-function(){stop("this is an error")}
warn_f<-function(){warning("this is a warning")}
msg_f<-function(){message("this is a message")}
tc(good_f()); tc(err_f()); tc(warn_f()); tc(msg_f())
my.matrx <- matrix(c(1:10, 11:20, 21:30), nrow = 10, ncol = 3)
my.matrx
apply(my.matrx,1:2, function(x) x+3)
apply(my.matrx,1, function(x) x+3)
my.matrx
apply(my.matrx,2, function(x) x+3)
my.matrx
apply(my.matrx,1, function(x) x+3)
apply(my.matrx,1:2, function(x) x+3)
apply(my.matrx,2, function(x) x+3)
my.matrx
apply(my.matrx,1:2, sum)
apply(my.matrx,1:2, sum)
my.matrx
apply(my.matrx,1:2, sum)
x3 <- array(x, dim = c(dim(x),3),
dimnames = c(dimnames(x), list(C = paste0("cop.",1:3))))
identical(x,  apply( x,  2,  identity))
identical(x3, apply(x3, 2:3, identity))
x3 <- array(x, dim = c(dim(x),3),
dimnames = c(dimnames(x), list(C = paste0("cop.",1:3))))
identical(x,  apply( x,  2,  identity))
identical(x3, apply(x3, 2:3, identity))
x=list(c(1,2,3,4,5), c(1,2,3))
apply(x, '[', sum)
apply(my.matrx,'[', function(x) x+3)
names(my.matrx)
colnames(my.matrx)<-c("small", "med", "large")
apply(my.matrx,'[, function(x) x+3)
apply(my.matrx,'[', function(x) x+3)
my.matrx <- matrix(c(1:10, 11:20, 21:30), nrow = 10, ncol = 3)
colnames(my.matrx)<-c("small", "med", "large")
rownames(my.matrx)<-c("r1", "r2", "r3")
my.matrx
paste0("r", 1:10)
my.matrx <- matrix(c(1:10, 11:20, 21:30), nrow = 10, ncol = 3)
colnames(my.matrx)<-c("small", "med", "large")
rownames(my.matrx)<-paste0("r", 1:10)
apply(my.matrx,'[', function(x) x+3)
dimnames(x)
my.matrx <- matrix(c(1:10, 11:20, 21:30), nrow = 10, ncol = 3, dimnames=list(paste0("r", 1:10), c("small", "med", "large")))
dimnames(my.matrix)
my.matrx <- matrix(c(1:10, 11:20, 21:30), nrow = 10, ncol = 3, dimnames=list(paste0("r", 1:10), c("small", "med", "large")))
dimnames(my.matrx)
apply(my.matrx,'[', function(x) x+3)
df <- data.frame(x = 1:4, y = 5:8, z = 10:13)
f <- function(x) sum(exp(x))
apply(df, 1:2, f)
apply(df, 1, f)
apply(df, 2, f)
apply(df, 1:2, f)
f <- function(x) exp(x)
apply(df, 2, f)
apply(df, 1:2, f)
apply(df, 1, f)
apply(df, 1:2, f)
df <- data.frame(x = 1:4, y = 5:8, z = letters[10:13])
apply(df, 1, tc)
apply(df, 1, function(x){tc(x+1)})
apply(df[,1:2], 1, function(x){tc(x+1)})
apply(df[,2:3], 1, function(x){tc(x+1)})
apply(df, 1, function(x){tc(x+1)})
tryCatch({x},
error=function(e){NA}
)}
tc <- function(x){
tryCatch({x},
error=function(e){NA}
)}
apply(df, 1, function(x){tc(x+1)})
apply(df[,1:2], 1, function(x){tc(x+1)})
typeof(npk)
str(npk)
apply(npk, 2, function(x){as.numeric(as.character(x))})
apply(npk, 2, as.numeric)
str(npk)
as.numeric(npk$N)
apply(npk, 2, as.numeric)
apply(npk, 2, as.numeric) %>%
str()
apply(npk, 2, as.numeric) %>%
View()
apply(npk, 2, function(x){as.numeric(as.character(x))}) %>%
str()
str(npk)
apply(npk, 2, as.character) %>%
View()
apply(npk, 2, as.character)
npk
as.matrix(npk)
typeof(npk)
typeof(as.matrix(npk))
apply(npk, 1:2, as.numeric)
apply(npk, 1, as.numeric)
data.frame(col1=c(1,2,NA, NA), col2=c(NA, "b", "c", "d"), col3=c(T, F, T, T))
df<-data.frame(col1=c(1,2,NA, NA), col2=c(NA, "b", "c", "d"), col3=c(T, F, T, T))
apply(df, 2, function(x){sum(is.na(x))})
df<-data.frame(col1=c(1,2,NA, NA), col2=c(NA, "b", "c", "d"), col3=c(T, F, T, T))
apply(df, 2, function(x){sum(is.na(x))})
df<-data.frame(col1=c(1,2,NA, NA), col2=c(NA, "b", "c", "d"), col3=c(T, F, T, T))
apply(df, 2, function(x){sum(is.na(x))})
l=list(a=matrix(1:9, nrow=2), b=matrix(1:6, nrow=2), c=matrix(1:12, nrow=4))
matrix(1:12, nrow=4)
matrix(1:6, nrow=2)
l=list(a=matrix(1:9, nrow=3), b=matrix(1:6, nrow=2), c=matrix(1:12, nrow=4))
lapply(l, "[",,2)
l
lapply(l, "[")
lapply(l, "[[")
lapply(l, "[")
l
lapply(l, "[", 2)
l
lapply(l, "[", 2, sum)
lapply(l, "[", , 2, sum)
lapply(l, "[", , sum)
lapply(l, "[", 1,)
lapply(l, "[", 1, sum)
l=list(a=matrix(1:9, nrow=3), b=matrix(7:10, nrow=2), c=matrix(1:12, nrow=4))
lapply(l, "[", 2)
lapply(l, "[[")
lapply(l, "[[", 2)
lapply(l, "[", 1, 2)
l
lapply(l, "[", 2)
l=list(a=matrix(1:9, nrow=3), b=matrix(7:10, nrow=2), c=matrix(4:15, nrow=4))
lapply(l, "[", 1, 2)
l
lapply(l, "[[", 2)
lapply(l, "[[", 1, 2)
lapply(l, "[", 1, 2)
lapply(l, "[", 2)
lapply(l, "[", 2, )
l
apply(l, "[", 1, 2)
apply(df, 2, function(x){sum(is.na(x))}, na.rm=T)
df2<-data.frame(col1=c(1,2,NA, NA), col2=factor(1,2,3,4))
apply(df, 2, function(x){sum(is.na(x))}, na.rm=T)
apply(df, 2, function(x){sum(is.na(x))})
apply(df2, 2, function(x){sum(is.na(x))})
npk
apply(npk, 2, function(x){sum(is.na(x))})
npk
apply(df2, 2, function(x){sum(is.na(x))})
as.matrix(df2)
factor(1,2,3,4)
df2<-data.frame(col1=c(1,2,NA, NA), col2=factor(c(1,2,3,4)))
apply(df2, 2, function(x){sum(is.na(x))}) # what's wrong?
df2<-data.frame(col1=c(1,2,NA, NA), col2=c("1", "2", "3", "4"))
as.matrix(df2)
df2<-data.frame(col1=c(1,2,NA, NA), col2=c("1", "2", "NA", "NA"))
as.matrix(df2)
apply(df2, 2, function(x){sum(is.na(as.numeric(x)))}) # what's wrong?
as.matrix(df2)
apply(df2, 2, function(x){sum(is.na(as.numeric(x)))}) # what's wrong?
df2<-data.frame(col1=c(1,2,NA, NA), col2=c("1", "2", "Inf", "NA"))
apply(df2, 2, function(x){sum(is.na(as.numeric(x)))}) # what's wrong?
apply(df, 2, sum)
apply(df, 2, function(x){sum(as.numeric(x))})  # Why?
apply(df, 2, function(x){sum(as.numeric(x))}, na.rm=T)  # Why not
# Count the number of NAs in each column
df<-data.frame(col1=1:4, col2=c(NA, "b", "c", "d"), col3=c(T, NA, F, NA))
apply(df, 2, function(x){sum(is.na(x))})
apply(df, 2, function(x){sum(as.numeric(x))}, na.rm=T)  # Why not 3, NA, 2 ?
apply(df, 2, function(x){sum(as.numeric(x))})  # Why not 3, NA, 2 ?
as.matrix(df)
apply(df, 2, function(x){sum(as.numeric(x))}, na.rm=T)  # Why not 3, NA, 2 ?
apply(df, 2, function(x){sum(as.numeric(x))})  # Why not 3, NA, 2 ?
apply(df, 2, function(x, ...){sum(as.numeric(x)),...}, na.rm=T)  # Why not 3, NA, 2 ?
apply(df, 2, function(x, ...){sum(as.numeric(x),...)}, na.rm=T)  # Why not 3, NA, 2 ?
apply(df[,3], 2, function(x, ...){sum(as.numeric(x),...)}, na.rm=T)  # Why not 3, NA, 2 ?
df[,3]
as.numeric(df[,3])
sum(as.numeric(df[,3]))
sum(as.numeric(df[,3]), na.rm = T)
apply(df[,3], 2, function(x, ...){as.numeric(x)})
# Count the number of NAs in each column
df<-data.frame(col1=1:4, col2=c(NA, "b", "c", "d"), col3=c(T, F, F, T), col3=c(T, NA, F, NA))
apply(df[,3:4], 2, function(x, ...){as.numeric(x)})
apply(df[,3], 2, function(x, ...){sum(as.numeric(x),...)}, na.rm=T)  # Why not 3, NA, 2 ?
apply(df[,3:4], 2, function(x, ...){sum(as.numeric(x),...)}, na.rm=T)  # Why not 3, NA, 2 ?
apply(df, 2, function(x){sum(as.numeric(x))})  # Why not 3, NA, 2 ?
apply(df[, 1:3], 2, function(x){sum(as.numeric(x))})  # Why not 3, NA, 2 ?
apply(df[, c(1,3)], 2, function(x){sum(as.numeric(x))})  # Why not 3, NA, 2 ?
apply(df[, 1:3], 2, function(x){sum(as.numeric(x))})  # Why not 3, NA, 2 ?
apply(df[, c(1,3)], 2, function(x, ...){sum(as.numeric(x),...)}, na.rm=T)  # Why not 3, NA, 2 ?
# Count the number of NAs in each column
df<-data.frame(col1=1:4, col2=c(NA, "b", "c", "d"), col3=c(T, F, F, NA), col3=c(T, NA, F, NA))
apply(df[, c(1,3)], 2, function(x, ...){sum(as.numeric(x),...)}, na.rm=T)  # Why not 3, NA, 2 ?
apply(df[,3:4], 2, function(x, ...){as.numeric(x)})
apply(df[,3:4], 2, function(x){{sum(as.numeric(x))})
apply(df[, c(1,3)], 2, function(x){{sum(as.numeric(x))})
apply(df[, c(1,3)], 2, function(x){sum(as.numeric(x))})
apply(df[, c(1,3)], 2, function(x, ...){sum(as.numeric(x),...)}, na.rm=T)  # Why not 3, NA, 2 ?
apply(df[, 1:3], 2, function(x){sum(as.numeric(x))})  # Why not 3, NA, 2 ?
apply(df[, 1:3], 2, function(x, ...){sum(as.numeric(x),...)}, na.rm=T)  # Why not 3, NA, 2 ?
apply(df, 2, function(x){sum(as.numeric(x))})                    # Why not 10, NA, 1 ?
apply(df, 2, function(x, ...){sum(as.numeric(x), ...)}, na.rm=T)
as.matrix(df)
# Count the number of NAs in each column
df<-data.frame(col1=1:4, col2=c(1,2, NA, NA), col3=c(NA, "b", "c", "d"), col4=c(T, F, F, NA))
apply(df, 2, function(x){sum(as.numeric(x))})
apply(df, 2, function(x, ...){sum(as.numeric(x), ...)}, na.rm=T)
apply(df, 2, function(x){sum(x)})
# Count the number of NAs in each column
df<-data.frame(col1=1:4, col2=c(1,2, NA, NA), col3=c(NA, "b", "c", "d"))
apply(df, 2, function(x){sum(is.na(x))})
sum(col3=c(NA, "b", "c", "d"))
sum(col1=1:4)
apply(df, 2, function(x){sum(x)})
apply(df, 2, function(x){sum(as.numeric(x))})
# Count the number of NAs in each column
df<-data.frame(col1=1:4, col2=c(1,2, NA, NA), col3=c(NA, "2", "3", "4"))
apply(df, 2, function(x, ...){sum(as.numeric(x), ...)}, na.rm=T)
apply(df, 2, function(x), ...{sum(x ,...)}, na.rm=T)
apply(df, 2, function(x, ...){sum(x ,...)}, na.rm=T)
apply(df, 2, function(x){sum(as.numeric(x))}, na.rm=T)
apply(df, 2, function(x){sum(as.numeric(x),...)}, na.rm=T)
apply(df, 2, function(x, ...){tc(sum(x ,...))}, na.rm=T) # Doesn't work. Why?
tc(sum(df[,1]))
apply(df, 2, function(x, ...){tc(sum(x ,...))}, na.rm=T) # Doesn't work. Why?
apply(df, 2, function(x, ...){sum(as.numeric(x), ...)}, na.rm=T)
# Sum columns with NAs
tc(sum(df[,2]))
# Recall tc we have defined eariler
apply(df, 2, function(x, ...){tryCatch(sum(x ,...), error=function()NA)}, na.rm=T) # Why all NAs?
# Recall tc we have defined eariler
apply(df, 2, function(x, ...){tryCatch({sum(x ,...)}, error=function()NA)}, na.rm=T) # Why all NAs?
# Recall tc we have defined eariler
apply(df, 2, function(x, ...){tryCatch({sum(x ,...)}, error=function(e)NA)}, na.rm=T) # Why all NAs?
apply(df, 2, function(x, ...){sum(as.numeric(x), ...)}, na.rm=T)
# Recall tryCatch we have defined earlier
apply(df, 2, function(x){tryCatch({sum(x)}, error=function(e)NA)}) # Why all NA?
apply(df, 2, function(x, ...){tryCatch({sum(x ,...)}, error=function(e)NA)}, na.rm=T) # Why all NA?
apply(df, 2, function(x, ...){tryCatch({sum(x ,...)}, error=function(e)NA)}, na.rm=T) # Why all NA?
apply(df, 2, function(x, ...){sum(as.numeric(x), ...)}, na.rm=T)
# Sum each column
df<-data.frame(col1=1:4, col2=c(1,2, NA, NA), col3=c("unknown", "2", "3", "4"))
# Sum each column
df<-data.frame(col1=1:4, col2=c(1,2, NA, NA), col3=c("unknown", "2", "3", "4"))
# Recall tryCatch
apply(df, 2, function(x){tryCatch({sum(x)}, error=function(e)NA)})
apply(df, 2, function(x, ...){sum(as.numeric(x), ...)}, na.rm=T)
# Recall tryCatch
apply(df, 2, function(x){tryCatch({sum(x)}, error=function()NA)})
tc <- function(x){
tryCatch({
x+2
},
error=function(x){
paste0(x, " is a character")
})
}
tc(2)
tc("2")
tc <- function(x){
tryCatch({
x+2
},
error=function(...){
paste0(x, " is a character")
})
}
tc(2)
tc("2")
tc <- function(x){
tryCatch({x},
error=function(e){print("error-handling-code")},
warning=function(w){print("warning-handling-code")},
message=function(m){print("message-handling-code")},
finally = {message("final message")}
)}
good_f<-function(){print("good")}
err_f<-function(){stop("this is an error")}
warn_f<-function(){warning("this is a warning")}
msg_f<-function(){message("this is a message")}
tc(good_f()); tc(err_f()); tc(warn_f()); tc(msg_f())
tc(NA)
x="2"
paste0(x, " is a character", perl=T)
# Sum each column
# Desired output: 10 3 9
df<-data.frame(
col1=1:4,
col2=c(1,2, NA, NA),
col3=c("N/A", "2", "3", "4"))
# Recall tryCatch
apply(df, 2, function(x){tryCatch({sum(x)}, error=function(e)NA)})
apply(df, 2, function(x, ...){sum(as.numeric(x), ...)}, na.rm=T)
# Count the number of NAs in each column
df<-data.frame(col1=1:4, col2=c(1,2, NA, NA), col3=c(NA, "2", "3", "4"))
apply(df, 2, function(x){sum(is.na(x))})
# Sum each column
apply(df, 2, mean, na.rm=T)
# Sum each column
apply(df, 2, mean, na.rm=T)
df<-data.frame(col1=1:4, col2=c(1,2, NA, NA), col3=c(NA, "2", "3", "4"))
# Sum each column
apply(df, 2, mean, na.rm=T)
# Take the avg. of each column
apply(df, 2, mean, na.rm=T)
# Take the avg. of column 1 & 2
apply(df[, 1:2], 2, mean, na.rm=T)
# Take the avg. of column 1 & 2
apply(df[, 1:2], 2, mean)
apply(df[, 1:2], 2, mean, na.rm=T)
lapply(l, "[[")
lapply(l, "[[", mean)
lapply(l, scale)
lapply(l, mean)
lapply(l, function(x){c(mean(x), sd(x))})
l=list(list(a=matrix(1:9, nrow=3), b=matrix(7:10, nrow=2)), c=matrix(4:15, nrow=4))
l
lapply(l, "[[", 1, 2)
lapply(l, "[[")
lapply(l, "[", 1, 2)
lapply(l, "[")
lapply(l, "[", "[")
lapply(l, "[", )
lapply(l, "[[")
lapply(l, "[[", 1, 2)
l=list(a=matrix(1:9, nrow=3), b=matrix(7:10, nrow=2), c=matrix(4:15, nrow=4))
lapply(l, "[[", 1, 2)
lapply(l, "[", 1, 2)    # 1st row, 2nd column of each list
sapply(l, function(x){c(mean(x), sd(x))})
sapply(l, function(x){c(mean(x), sd(x))}, simplify = F)
sapply(l, function(x){c(avg=mean(x), std=sd(x))})
options(digits = 3)
lapply(l, function(x){c(avg=mean(x), std=sd(x))})
l
lapply(l, "[", 2)
lapply(l, "[", 1, 2)    # 1st row, 2nd column of each list
lapply(l, "[", 2, )     # 2nd row  of each list
lapply(l, "[", , 2)     # 2nd col of each list
lapply(l, "[", 1, )     # 2nd row  of each list
lapply(l, "[", , 2)     # 2nd col of each list
lapply(l, "[", 1, 2)    # 1st row, 2nd column of each list
lapply(l, "[", 3, )     # 2nd row  of each list
lapply(l, "[", 1, )     # 2nd row  of each list
lapply(l, "[", , 2)     # 2nd col of each list
lapply(l, "[", 1, 2)    # 1st row, 2nd column of each list
sapply(l, "[", 1, )     # 2nd row  of each list
sapply(l, "[", , 2)     # 2nd col of each list
sapply(l, "[", 1, 2)    # 1st row, 2nd column of each list
lapply(l, "[", 1, )     # 2nd row  of each list
lapply(l, "[", , 2)     # 2nd col of each list
lapply(l, "[", 1, 2)    # 1st row, 2nd column of each list
lapply(l, "[[", 1, )
lapply(l, "[[",)
lapply(l, "[[",1)
# 1st row of each element
lapply(l, "[", 1, )
lapply(l, "[[",1)
lapply(l, "[[",1)
lapply(l, "[[",2)
l
lapply(l, "[", 1)
lapply(l, "[[", 1)
ll=list(A=list(a=matrix(1:9, nrow=3), b=matrix(7:10, nrow=2)), c=matrix(4:15, nrow=4))
lapply(ll, "[[", 1)
ll=list(A=list(a=matrix(1:9, nrow=3), b=matrix(7:10, nrow=2)), c=matrix(4:15, nrow=4))
lapply(ll, "[[", 1)
lapply(ll, "[", 1)
lapply(ll, "[", 2)
lapply(ll, "[[", 2)
lapply(ll, "[", 2)
lapply(ll, "[", 1)
ll=list(A=list(a=matrix(1:9, nrow=3), b=list(matrix(7:10, nrow=2))), c=matrix(4:15, nrow=4))
lapply(lll, "[", 1)
lll=list(A=list(a=matrix(1:9, nrow=3), b=list(matrix(7:10, nrow=2))), c=matrix(4:15, nrow=4))
lapply(lll, "[", 1)
lapply(lll, "[", 2)
lll=list(A=list(a=matrix(1:9, nrow=3), b=list(matrix(7:10, nrow=2), c(1,2,3))), c=matrix(4:15, nrow=4))
lapply(lll, "[", 2)
lapply(lll, "[[", 2)
lapply(lll, "[", 2)
lapply(lll, "[[", 2)
lapply(lll, "[", 2)
lapply(lll, "[[", 2)
lapply(lll, "[", 2)
lapply(lll, "[[", 2)
lapply(lll, "[", 2)
lapply(lll, "[[", 2)
lapply(lll, "[", 2)
f<-function(x,y) x^2
1 %>%
f(2)
1 %>%
f(2,)
1 %>%
f(2,.)
1 dplyr::%>% sqrt()
